{
    "sourceFile": "game.html (continuación)",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1741038271282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741038396452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,196 @@\n+<script>\r\n+    // Continuación del script anterior\r\n+    \r\n+    function useSkill() {\r\n+        // ...existing code...\r\n+        \r\n+        switch (gameState.player.specialization) {\r\n+            // ...existing code...\r\n+                \r\n+            case 'purple': // Equilibrado\r\n+                skillName = \"Interferencia Neural\";\r\n+                damage = Math.floor(gameState.player.attack * 0.8);\r\n+                gameState.enemy.health = Math.max(0, gameState.enemy.health - damage);\r\n+                gameState.enemy.isStunned = true;\r\n+                addMessage(`¡Usas ${skillName}! Causas ${damage} puntos de daño al ${gameState.enemy.name} y lo aturdes.`);\r\n+                break;\r\n+                \r\n+            default:\r\n+                skillName = \"Ataque Rápido\";\r\n+                damage = gameState.player.attack;\r\n+                gameState.enemy.health = Math.max(0, gameState.enemy.health - damage);\r\n+                addMessage(`¡Usas ${skillName}! Causas ${damage} puntos de daño al ${gameState.enemy.name}.`);\r\n+                break;\r\n+        }\r\n+        \r\n+        // Animar al jugador\r\n+        document.getElementById('player-sprite').classList.add('attack');\r\n+        setTimeout(() => document.getElementById('player-sprite').classList.remove('attack'), 500);\r\n+        \r\n+        // Animar daño al enemigo\r\n+        setTimeout(() => {\r\n+            document.getElementById('enemy-sprite').classList.add('hit');\r\n+            setTimeout(() => document.getElementById('enemy-sprite').classList.remove('hit'), 300);\r\n+        }, 500);\r\n+        \r\n+        // Actualizar UI\r\n+        setTimeout(() => {\r\n+            updateUI();\r\n+            \r\n+            // Verificar si el enemigo ha sido derrotado\r\n+            if (gameState.enemy.health <= 0) {\r\n+                endCombat(true);\r\n+                return;\r\n+            }\r\n+            \r\n+            // Turno del enemigo\r\n+            gameState.turn = \"enemy\";\r\n+            setTimeout(enemyTurn, 1000);\r\n+        }, 800);\r\n+    }\r\n+    \r\n+    function useItem() {\r\n+        if (gameState.turn !== \"player\" || !gameState.combatActive) return;\r\n+        \r\n+        // Mostrar opciones de inventario en un diálogo\r\n+        const dialog = document.getElementById('dialog-modal');\r\n+        const dialogTitle = document.getElementById('dialog-title');\r\n+        const dialogText = document.getElementById('dialog-text');\r\n+        const dialogConfirm = document.getElementById('dialog-confirm');\r\n+        \r\n+        // Configurar el diálogo\r\n+        dialogTitle.textContent = \"Inventario\";\r\n+        \r\n+        // Crear elementos para cada ítem\r\n+        let html = \"<div class='inventory-dialog'>\";\r\n+        gameState.player.inventory.forEach(item => {\r\n+            html += `<div class='inventory-option' onclick='selectItem(${item.id})'>\r\n+                <div class='item-name'>${item.name}</div>\r\n+                <div class='item-desc'>${item.description}</div>\r\n+            </div>`;\r\n+        });\r\n+        html += \"</div>\";\r\n+        \r\n+        dialogText.innerHTML = html;\r\n+        dialogConfirm.textContent = \"Cancelar\";\r\n+        \r\n+        // Mostrar diálogo\r\n+        dialog.style.display = 'flex';\r\n+    }\r\n+    \r\n+    function selectItem(itemId) {\r\n+        // Cerrar diálogo\r\n+        closeDialog();\r\n+        \r\n+        // Buscar ítem en inventario\r\n+        const item = gameState.player.inventory.find(i => i.id === itemId);\r\n+        if (!item) return;\r\n+        \r\n+        let effect = 0;\r\n+        \r\n+        // Aplicar efecto según tipo de ítem\r\n+        switch(item.type) {\r\n+            case 'heal':\r\n+                effect = Math.min(item.value, gameState.player.maxHealth - gameState.player.health);\r\n+                gameState.player.health += effect;\r\n+                addMessage(`Has usado ${item.name}. Recuperas ${effect} puntos de salud.`);\r\n+                break;\r\n+                \r\n+            case 'energy':\r\n+                effect = Math.min(item.value, gameState.player.maxEnergy - gameState.player.energy);\r\n+                gameState.player.energy += effect;\r\n+                addMessage(`Has usado ${item.name}. Recuperas ${effect} puntos de energía.`);\r\n+                break;\r\n+                \r\n+            case 'damage':\r\n+                effect = Math.max(1, item.value - gameState.enemy.defense);\r\n+                gameState.enemy.health = Math.max(0, gameState.enemy.health - effect);\r\n+                addMessage(`Has usado ${item.name} contra el enemigo. Causas ${effect} puntos de daño.`);\r\n+                \r\n+                // Animar daño al enemigo\r\n+                document.getElementById('enemy-sprite').classList.add('hit');\r\n+                setTimeout(() => document.getElementById('enemy-sprite').classList.remove('hit'), 300);\r\n+                break;\r\n+        }\r\n+        \r\n+        // Eliminar el ítem usado\r\n+        const itemIndex = gameState.player.inventory.findIndex(i => i.id === itemId);\r\n+        if (itemIndex !== -1) {\r\n+            gameState.player.inventory.splice(itemIndex, 1);\r\n+        }\r\n+        \r\n+        // Actualizar UI\r\n+        updateUI();\r\n+        \r\n+        // Verificar si el enemigo ha sido derrotado\r\n+        if (gameState.enemy.health <= 0) {\r\n+            endCombat(true);\r\n+            return;\r\n+        }\r\n+        \r\n+        // Pasar turno al enemigo\r\n+        gameState.turn = \"enemy\";\r\n+        setTimeout(enemyTurn, 1000);\r\n+    }\r\n+    \r\n+    function defend() {\r\n+        if (gameState.turn !== \"player\" || !gameState.combatActive) return;\r\n+        \r\n+        // Aumentar defensa temporalmente\r\n+        const defenseBonus = Math.floor(gameState.player.defense * 0.5);\r\n+        gameState.player.defense += defenseBonus;\r\n+        gameState.player.defending = true;\r\n+        \r\n+        addMessage(`Te has puesto en posición defensiva. Tu defensa aumenta ${defenseBonus} puntos.`);\r\n+        \r\n+        // Turno del enemigo\r\n+        gameState.turn = \"enemy\";\r\n+        setTimeout(enemyTurn, 1000);\r\n+    }\r\n+    \r\n+    function enemyTurn() {\r\n+        if (!gameState.combatActive) return;\r\n+        \r\n+        // Verificar si el enemigo está aturdido\r\n+        if (gameState.enemy.isStunned) {\r\n+            addMessage(`${gameState.enemy.name} está aturdido y no puede atacar este turno.`);\r\n+            gameState.enemy.isStunned = false; // Recuperarse del aturdimiento\r\n+            gameState.turn = \"player\";\r\n+            return;\r\n+        }\r\n+        \r\n+        // El enemigo ataca\r\n+        const damage = Math.max(1, gameState.enemy.attack - gameState.player.defense);\r\n+        gameState.player.health = Math.max(0, gameState.player.health - damage);\r\n+        \r\n+        // Mensaje\r\n+        addMessage(`${gameState.enemy.name} te ataca y causa ${damage} puntos de daño.`);\r\n+        \r\n+        // Animar daño al jugador\r\n+        document.getElementById('player-sprite').classList.add('hit');\r\n+        setTimeout(() => document.getElementById('player-sprite').classList.remove('hit'), 300);\r\n+        \r\n+        // Si el jugador estaba defendiendo, quitar el bono de defensa\r\n+        if (gameState.player.defending) {\r\n+            const defenseBonus = Math.floor(gameState.player.defense * 0.5 / 1.5);\r\n+            gameState.player.defense -= defenseBonus;\r\n+            gameState.player.defending = false;\r\n+        }\r\n+        \r\n+        // Actualizar UI\r\n+        updateUI();\r\n+        \r\n+        // Verificar si el jugador ha sido derrotado\r\n+        if (gameState.player.health <= 0) {\r\n+            endCombat(false);\r\n+            return;\r\n+        }\r\n+        \r\n+        // Devolver turno al jugador\r\n+        gameState.turn = \"player\";\r\n+    }\r\n+    \r\n+    function endCombat(victory) {\r\n+        gameState.combatActive = false;\r\n+        \r\n+        const resultModal = document.getElementById('combat-result-modal');\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741038404200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,5 +192,7 @@\n     \r\n     function endCombat(victory) {\r\n         gameState.combatActive = false;\r\n         \r\n-        const resultModal = document.getElementById('combat-result-modal');\n\\ No newline at end of file\n+        const resultModal = document.getElementById('combat-result-modal');\r\n+        const resultTitle = document.getElementById('result-title');\r\n+        const resultText = document.getElementById('result-text');\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741038419605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,229 @@\n+<script>\r\n+    // Continuación del script anterior\r\n+    \r\n+    function useSkill() {\r\n+        // ...existing code...\r\n+        \r\n+        switch (gameState.player.specialization) {\r\n+            // ...existing code...\r\n+                \r\n+            case 'purple': // Equilibrado\r\n+                skillName = \"Interferencia Neural\";\r\n+                damage = Math.floor(gameState.player.attack * 0.8);\r\n+                gameState.enemy.health = Math.max(0, gameState.enemy.health - damage);\r\n+                gameState.enemy.isStunned = true;\r\n+                addMessage(`¡Usas ${skillName}! Causas ${damage} puntos de daño al ${gameState.enemy.name} y lo aturdes.`);\r\n+                break;\r\n+                \r\n+            default:\r\n+                skillName = \"Ataque Rápido\";\r\n+                damage = gameState.player.attack;\r\n+                gameState.enemy.health = Math.max(0, gameState.enemy.health - damage);\r\n+                addMessage(`¡Usas ${skillName}! Causas ${damage} puntos de daño al ${gameState.enemy.name}.`);\r\n+                break;\r\n+        }\r\n+        \r\n+        // Animar al jugador\r\n+        document.getElementById('player-sprite').classList.add('attack');\r\n+        setTimeout(() => document.getElementById('player-sprite').classList.remove('attack'), 500);\r\n+        \r\n+        // Animar daño al enemigo\r\n+        setTimeout(() => {\r\n+            document.getElementById('enemy-sprite').classList.add('hit');\r\n+            setTimeout(() => document.getElementById('enemy-sprite').classList.remove('hit'), 300);\r\n+        }, 500);\r\n+        \r\n+        // Actualizar UI\r\n+        setTimeout(() => {\r\n+            updateUI();\r\n+            \r\n+            // Verificar si el enemigo ha sido derrotado\r\n+            if (gameState.enemy.health <= 0) {\r\n+                endCombat(true);\r\n+                return;\r\n+            }\r\n+            \r\n+            // Turno del enemigo\r\n+            gameState.turn = \"enemy\";\r\n+            setTimeout(enemyTurn, 1000);\r\n+        }, 800);\r\n+    }\r\n+    \r\n+    function useItem() {\r\n+        if (gameState.turn !== \"player\" || !gameState.combatActive) return;\r\n+        \r\n+        // Mostrar opciones de inventario en un diálogo\r\n+        const dialog = document.getElementById('dialog-modal');\r\n+        const dialogTitle = document.getElementById('dialog-title');\r\n+        const dialogText = document.getElementById('dialog-text');\r\n+        const dialogConfirm = document.getElementById('dialog-confirm');\r\n+        \r\n+        // Configurar el diálogo\r\n+        dialogTitle.textContent = \"Inventario\";\r\n+        \r\n+        // Crear elementos para cada ítem\r\n+        let html = \"<div class='inventory-dialog'>\";\r\n+        gameState.player.inventory.forEach(item => {\r\n+            html += `<div class='inventory-option' onclick='selectItem(${item.id})'>\r\n+                <div class='item-name'>${item.name}</div>\r\n+                <div class='item-desc'>${item.description}</div>\r\n+            </div>`;\r\n+        });\r\n+        html += \"</div>\";\r\n+        \r\n+        dialogText.innerHTML = html;\r\n+        dialogConfirm.textContent = \"Cancelar\";\r\n+        \r\n+        // Mostrar diálogo\r\n+        dialog.style.display = 'flex';\r\n+    }\r\n+    \r\n+    function selectItem(itemId) {\r\n+        // Cerrar diálogo\r\n+        closeDialog();\r\n+        \r\n+        // Buscar ítem en inventario\r\n+        const item = gameState.player.inventory.find(i => i.id === itemId);\r\n+        if (!item) return;\r\n+        \r\n+        let effect = 0;\r\n+        \r\n+        // Aplicar efecto según tipo de ítem\r\n+        switch(item.type) {\r\n+            case 'heal':\r\n+                effect = Math.min(item.value, gameState.player.maxHealth - gameState.player.health);\r\n+                gameState.player.health += effect;\r\n+                addMessage(`Has usado ${item.name}. Recuperas ${effect} puntos de salud.`);\r\n+                break;\r\n+                \r\n+            case 'energy':\r\n+                effect = Math.min(item.value, gameState.player.maxEnergy - gameState.player.energy);\r\n+                gameState.player.energy += effect;\r\n+                addMessage(`Has usado ${item.name}. Recuperas ${effect} puntos de energía.`);\r\n+                break;\r\n+                \r\n+            case 'damage':\r\n+                effect = Math.max(1, item.value - gameState.enemy.defense);\r\n+                gameState.enemy.health = Math.max(0, gameState.enemy.health - effect);\r\n+                addMessage(`Has usado ${item.name} contra el enemigo. Causas ${effect} puntos de daño.`);\r\n+                \r\n+                // Animar daño al enemigo\r\n+                document.getElementById('enemy-sprite').classList.add('hit');\r\n+                setTimeout(() => document.getElementById('enemy-sprite').classList.remove('hit'), 300);\r\n+                break;\r\n+        }\r\n+        \r\n+        // Eliminar el ítem usado\r\n+        const itemIndex = gameState.player.inventory.findIndex(i => i.id === itemId);\r\n+        if (itemIndex !== -1) {\r\n+            gameState.player.inventory.splice(itemIndex, 1);\r\n+        }\r\n+        \r\n+        // Actualizar UI\r\n+        updateUI();\r\n+        \r\n+        // Verificar si el enemigo ha sido derrotado\r\n+        if (gameState.enemy.health <= 0) {\r\n+            endCombat(true);\r\n+            return;\r\n+        }\r\n+        \r\n+        // Pasar turno al enemigo\r\n+        gameState.turn = \"enemy\";\r\n+        setTimeout(enemyTurn, 1000);\r\n+    }\r\n+    \r\n+    function defend() {\r\n+        if (gameState.turn !== \"player\" || !gameState.combatActive) return;\r\n+        \r\n+        // Aumentar defensa temporalmente\r\n+        const defenseBonus = Math.floor(gameState.player.defense * 0.5);\r\n+        gameState.player.defense += defenseBonus;\r\n+        gameState.player.defending = true;\r\n+        \r\n+        addMessage(`Te has puesto en posición defensiva. Tu defensa aumenta ${defenseBonus} puntos.`);\r\n+        \r\n+        // Turno del enemigo\r\n+        gameState.turn = \"enemy\";\r\n+        setTimeout(enemyTurn, 1000);\r\n+    }\r\n+    \r\n+    function enemyTurn() {\r\n+        if (!gameState.combatActive) return;\r\n+        \r\n+        // Verificar si el enemigo está aturdido\r\n+        if (gameState.enemy.isStunned) {\r\n+            addMessage(`${gameState.enemy.name} está aturdido y no puede atacar este turno.`);\r\n+            gameState.enemy.isStunned = false; // Recuperarse del aturdimiento\r\n+            gameState.turn = \"player\";\r\n+            return;\r\n+        }\r\n+        \r\n+        // El enemigo ataca\r\n+        const damage = Math.max(1, gameState.enemy.attack - gameState.player.defense);\r\n+        gameState.player.health = Math.max(0, gameState.player.health - damage);\r\n+        \r\n+        // Mensaje\r\n+        addMessage(`${gameState.enemy.name} te ataca y causa ${damage} puntos de daño.`);\r\n+        \r\n+        // Animar daño al jugador\r\n+        document.getElementById('player-sprite').classList.add('hit');\r\n+        setTimeout(() => document.getElementById('player-sprite').classList.remove('hit'), 300);\r\n+        \r\n+        // Si el jugador estaba defendiendo, quitar el bono de defensa\r\n+        if (gameState.player.defending) {\r\n+            const defenseBonus = Math.floor(gameState.player.defense * 0.5 / 1.5);\r\n+            gameState.player.defense -= defenseBonus;\r\n+            gameState.player.defending = false;\r\n+        }\r\n+        \r\n+        // Actualizar UI\r\n+        updateUI();\r\n+        \r\n+        // Verificar si el jugador ha sido derrotado\r\n+        if (gameState.player.health <= 0) {\r\n+            endCombat(false);\r\n+            return;\r\n+        }\r\n+        \r\n+        // Devolver turno al jugador\r\n+        gameState.turn = \"player\";\r\n+    }\r\n+    \r\n+    function endCombat(victory) {\r\n+        gameState.combatActive = false;\r\n+        \r\n+        const resultModal = document.getElementById('combat-result-modal');\r\n+        const resultTitle = document.getElementById('result-title');\r\n+        const resultText = document.getElementById('result-text');\r\n+        \r\n+        if (victory) {\r\n+            // Victoria\r\n+            resultTitle.textContent = '¡Victoria!';\r\n+            \r\n+            // Calcular recompensas\r\n+            const expGained = gameState.enemy.exp;\r\n+            const creditsGained = gameState.enemy.credits;\r\n+            \r\n+            // Actualizar estadísticas del jugador\r\n+            gameState.player.exp += expGained;\r\n+            gameState.player.credits += creditsGained;\r\n+            \r\n+            // Verificar subida de nivel\r\n+            let levelUpText = '';\r\n+            if (gameState.player.exp >= gameState.player.nextLevelExp) {\r\n+                const oldLevel = gameState.player.level;\r\n+                gameState.player.level++;\r\n+                gameState.player.exp -= gameState.player.nextLevelExp;\r\n+                gameState.player.nextLevelExp = 100 * Math.pow(1.5, gameState.player.level - 1);\r\n+                gameState.player.attack += 2;\r\n+                gameState.player.defense += 1;\r\n+                gameState.player.maxHealth += 10;\r\n+                gameState.player.health = gameState.player.maxHealth; // Recuperación total\r\n+                \r\n+                levelUpText = `<p style=\"color: var(--gothic-gold); margin-top: 10px;\">¡Has subido al nivel ${gameState.player.level}!</p>\r\n+                <p>Ataque +2</p>\r\n+                <p>Defensa +1</p>\r\n+                <p>Salud Máxima +10</p>`;\r\n+            }\r\n+            \n\\ No newline at end of file\n"
                },
                {
                    "date": 1741038441902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,272 @@\n+<script>\r\n+    // Continuación del script anterior\r\n+    \r\n+    function useSkill() {\r\n+        // ...existing code...\r\n+        \r\n+        switch (gameState.player.specialization) {\r\n+            // ...existing code...\r\n+                \r\n+            case 'purple': // Equilibrado\r\n+                skillName = \"Interferencia Neural\";\r\n+                damage = Math.floor(gameState.player.attack * 0.8);\r\n+                gameState.enemy.health = Math.max(0, gameState.enemy.health - damage);\r\n+                gameState.enemy.isStunned = true;\r\n+                addMessage(`¡Usas ${skillName}! Causas ${damage} puntos de daño al ${gameState.enemy.name} y lo aturdes.`);\r\n+                break;\r\n+                \r\n+            default:\r\n+                skillName = \"Ataque Rápido\";\r\n+                damage = gameState.player.attack;\r\n+                gameState.enemy.health = Math.max(0, gameState.enemy.health - damage);\r\n+                addMessage(`¡Usas ${skillName}! Causas ${damage} puntos de daño al ${gameState.enemy.name}.`);\r\n+                break;\r\n+        }\r\n+        \r\n+        // Animar al jugador\r\n+        document.getElementById('player-sprite').classList.add('attack');\r\n+        setTimeout(() => document.getElementById('player-sprite').classList.remove('attack'), 500);\r\n+        \r\n+        // Animar daño al enemigo\r\n+        setTimeout(() => {\r\n+            document.getElementById('enemy-sprite').classList.add('hit');\r\n+            setTimeout(() => document.getElementById('enemy-sprite').classList.remove('hit'), 300);\r\n+        }, 500);\r\n+        \r\n+        // Actualizar UI\r\n+        setTimeout(() => {\r\n+            updateUI();\r\n+            \r\n+            // Verificar si el enemigo ha sido derrotado\r\n+            if (gameState.enemy.health <= 0) {\r\n+                endCombat(true);\r\n+                return;\r\n+            }\r\n+            \r\n+            // Turno del enemigo\r\n+            gameState.turn = \"enemy\";\r\n+            setTimeout(enemyTurn, 1000);\r\n+        }, 800);\r\n+    }\r\n+    \r\n+    function useItem() {\r\n+        if (gameState.turn !== \"player\" || !gameState.combatActive) return;\r\n+        \r\n+        // Mostrar opciones de inventario en un diálogo\r\n+        const dialog = document.getElementById('dialog-modal');\r\n+        const dialogTitle = document.getElementById('dialog-title');\r\n+        const dialogText = document.getElementById('dialog-text');\r\n+        const dialogConfirm = document.getElementById('dialog-confirm');\r\n+        \r\n+        // Configurar el diálogo\r\n+        dialogTitle.textContent = \"Inventario\";\r\n+        \r\n+        // Crear elementos para cada ítem\r\n+        let html = \"<div class='inventory-dialog'>\";\r\n+        gameState.player.inventory.forEach(item => {\r\n+            html += `<div class='inventory-option' onclick='selectItem(${item.id})'>\r\n+                <div class='item-name'>${item.name}</div>\r\n+                <div class='item-desc'>${item.description}</div>\r\n+            </div>`;\r\n+        });\r\n+        html += \"</div>\";\r\n+        \r\n+        dialogText.innerHTML = html;\r\n+        dialogConfirm.textContent = \"Cancelar\";\r\n+        \r\n+        // Mostrar diálogo\r\n+        dialog.style.display = 'flex';\r\n+    }\r\n+    \r\n+    function selectItem(itemId) {\r\n+        // Cerrar diálogo\r\n+        closeDialog();\r\n+        \r\n+        // Buscar ítem en inventario\r\n+        const item = gameState.player.inventory.find(i => i.id === itemId);\r\n+        if (!item) return;\r\n+        \r\n+        let effect = 0;\r\n+        \r\n+        // Aplicar efecto según tipo de ítem\r\n+        switch(item.type) {\r\n+            case 'heal':\r\n+                effect = Math.min(item.value, gameState.player.maxHealth - gameState.player.health);\r\n+                gameState.player.health += effect;\r\n+                addMessage(`Has usado ${item.name}. Recuperas ${effect} puntos de salud.`);\r\n+                break;\r\n+                \r\n+            case 'energy':\r\n+                effect = Math.min(item.value, gameState.player.maxEnergy - gameState.player.energy);\r\n+                gameState.player.energy += effect;\r\n+                addMessage(`Has usado ${item.name}. Recuperas ${effect} puntos de energía.`);\r\n+                break;\r\n+                \r\n+            case 'damage':\r\n+                effect = Math.max(1, item.value - gameState.enemy.defense);\r\n+                gameState.enemy.health = Math.max(0, gameState.enemy.health - effect);\r\n+                addMessage(`Has usado ${item.name} contra el enemigo. Causas ${effect} puntos de daño.`);\r\n+                \r\n+                // Animar daño al enemigo\r\n+                document.getElementById('enemy-sprite').classList.add('hit');\r\n+                setTimeout(() => document.getElementById('enemy-sprite').classList.remove('hit'), 300);\r\n+                break;\r\n+        }\r\n+        \r\n+        // Eliminar el ítem usado\r\n+        const itemIndex = gameState.player.inventory.findIndex(i => i.id === itemId);\r\n+        if (itemIndex !== -1) {\r\n+            gameState.player.inventory.splice(itemIndex, 1);\r\n+        }\r\n+        \r\n+        // Actualizar UI\r\n+        updateUI();\r\n+        \r\n+        // Verificar si el enemigo ha sido derrotado\r\n+        if (gameState.enemy.health <= 0) {\r\n+            endCombat(true);\r\n+            return;\r\n+        }\r\n+        \r\n+        // Pasar turno al enemigo\r\n+        gameState.turn = \"enemy\";\r\n+        setTimeout(enemyTurn, 1000);\r\n+    }\r\n+    \r\n+    function defend() {\r\n+        if (gameState.turn !== \"player\" || !gameState.combatActive) return;\r\n+        \r\n+        // Aumentar defensa temporalmente\r\n+        const defenseBonus = Math.floor(gameState.player.defense * 0.5);\r\n+        gameState.player.defense += defenseBonus;\r\n+        gameState.player.defending = true;\r\n+        \r\n+        addMessage(`Te has puesto en posición defensiva. Tu defensa aumenta ${defenseBonus} puntos.`);\r\n+        \r\n+        // Turno del enemigo\r\n+        gameState.turn = \"enemy\";\r\n+        setTimeout(enemyTurn, 1000);\r\n+    }\r\n+    \r\n+    function enemyTurn() {\r\n+        if (!gameState.combatActive) return;\r\n+        \r\n+        // Verificar si el enemigo está aturdido\r\n+        if (gameState.enemy.isStunned) {\r\n+            addMessage(`${gameState.enemy.name} está aturdido y no puede atacar este turno.`);\r\n+            gameState.enemy.isStunned = false; // Recuperarse del aturdimiento\r\n+            gameState.turn = \"player\";\r\n+            return;\r\n+        }\r\n+        \r\n+        // El enemigo ataca\r\n+        const damage = Math.max(1, gameState.enemy.attack - gameState.player.defense);\r\n+        gameState.player.health = Math.max(0, gameState.player.health - damage);\r\n+        \r\n+        // Mensaje\r\n+        addMessage(`${gameState.enemy.name} te ataca y causa ${damage} puntos de daño.`);\r\n+        \r\n+        // Animar daño al jugador\r\n+        document.getElementById('player-sprite').classList.add('hit');\r\n+        setTimeout(() => document.getElementById('player-sprite').classList.remove('hit'), 300);\r\n+        \r\n+        // Si el jugador estaba defendiendo, quitar el bono de defensa\r\n+        if (gameState.player.defending) {\r\n+            const defenseBonus = Math.floor(gameState.player.defense * 0.5 / 1.5);\r\n+            gameState.player.defense -= defenseBonus;\r\n+            gameState.player.defending = false;\r\n+        }\r\n+        \r\n+        // Actualizar UI\r\n+        updateUI();\r\n+        \r\n+        // Verificar si el jugador ha sido derrotado\r\n+        if (gameState.player.health <= 0) {\r\n+            endCombat(false);\r\n+            return;\r\n+        }\r\n+        \r\n+        // Devolver turno al jugador\r\n+        gameState.turn = \"player\";\r\n+    }\r\n+    \r\n+    function endCombat(victory) {\r\n+        gameState.combatActive = false;\r\n+        \r\n+        const resultModal = document.getElementById('combat-result-modal');\r\n+        const resultTitle = document.getElementById('result-title');\r\n+        const resultText = document.getElementById('result-text');\r\n+        \r\n+        if (victory) {\r\n+            // Victoria\r\n+            resultTitle.textContent = '¡Victoria!';\r\n+            \r\n+            // Calcular recompensas\r\n+            const expGained = gameState.enemy.exp;\r\n+            const creditsGained = gameState.enemy.credits;\r\n+            \r\n+            // Actualizar estadísticas del jugador\r\n+            gameState.player.exp += expGained;\r\n+            gameState.player.credits += creditsGained;\r\n+            \r\n+            // Verificar subida de nivel\r\n+            let levelUpText = '';\r\n+            if (gameState.player.exp >= gameState.player.nextLevelExp) {\r\n+                const oldLevel = gameState.player.level;\r\n+                gameState.player.level++;\r\n+                gameState.player.exp -= gameState.player.nextLevelExp;\r\n+                gameState.player.nextLevelExp = 100 * Math.pow(1.5, gameState.player.level - 1);\r\n+                gameState.player.attack += 2;\r\n+                gameState.player.defense += 1;\r\n+                gameState.player.maxHealth += 10;\r\n+                gameState.player.health = gameState.player.maxHealth; // Recuperación total\r\n+                \r\n+                levelUpText = `<p style=\"color: var(--gothic-gold); margin-top: 10px;\">¡Has subido al nivel ${gameState.player.level}!</p>\r\n+                <p>Ataque +2</p>\r\n+                <p>Defensa +1</p>\r\n+                <p>Salud Máxima +10</p>`;\r\n+            }\r\n+            \r\n+            // Item aleatorio como recompensa\r\n+            const randomItems = [\r\n+                { name: \"Poción de salud\", type: \"heal\", value: 30, description: \"Restaura 30 puntos de salud\" },\r\n+                { name: \"Granada EMP\", type: \"damage\", value: 25, description: \"Causa 25 puntos de daño al enemigo\" },\r\n+                { name: \"Estimulante neural\", type: \"energy\", value: 20, description: \"Restaura 20 puntos de energía\" },\r\n+                { name: \"Fragmento de datos\", type: \"quest\", value: 1, description: \"Componente para mejoras\" }\r\n+            ];\r\n+            \r\n+            const randomItem = randomItems[Math.floor(Math.random() * randomItems.length)];\r\n+            const newItemId = Date.now(); // ID único basado en timestamp\r\n+            randomItem.id = newItemId;\r\n+            gameState.player.inventory.push(randomItem);\r\n+            \r\n+            // Mostrar texto de resultado\r\n+            resultText.innerHTML = `\r\n+                Has derrotado a ${gameState.enemy.name}.\r\n+                <div style=\"margin-top: 15px;\">\r\n+                    <p>Recompensas:</p>\r\n+                    <ul style=\"list-style-type: none; padding-left: 20px;\">\r\n+                        <li>+ ${expGained} EXP</li>\r\n+                        <li>+ ${creditsGained} Créditos</li>\r\n+                        <li>+ ${randomItem.name}</li>\r\n+                    </ul>\r\n+                    ${levelUpText}\r\n+                </div>\r\n+            `;\r\n+            \r\n+        } else {\r\n+            // Derrota\r\n+            resultTitle.textContent = '¡Derrota!';\r\n+            resultText.innerHTML = `\r\n+                Has sido derrotado por ${gameState.enemy.name}.\r\n+                <div style=\"margin-top: 15px;\">\r\n+                    <p>Pierdes ${Math.floor(gameState.player.credits * 0.1)} créditos en el combate.</p>\r\n+                </div>\r\n+            `;\r\n+            \r\n+            // Penalización por derrota\r\n+            gameState.player.credits = Math.floor(gameState.player.credits * 0.9);\r\n+            gameState.player.health = Math.floor(gameState.player.maxHealth * 0.3); // Recuperación parcial\r\n+        }\r\n+        \r\n+        // Mostrar modal\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741038521848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,5 +268,117 @@\n             gameState.player.credits = Math.floor(gameState.player.credits * 0.9);\r\n             gameState.player.health = Math.floor(gameState.player.maxHealth * 0.3); // Recuperación parcial\r\n         }\r\n         \r\n-        // Mostrar modal\n\\ No newline at end of file\n+        // Mostrar modal\r\n+        resultModal.style.display = 'flex';\r\n+        \r\n+        // Guardar progreso\r\n+        saveGame();\r\n+    }\r\n+    \r\n+    function continueBattle() {\r\n+        // Cerrar modal\r\n+        document.getElementById('combat-result-modal').style.display = 'none';\r\n+        \r\n+        // Si fue victoria, generar nuevo enemigo\r\n+        if (gameState.player.health > 0) {\r\n+            generateNewEnemy();\r\n+            gameState.combatActive = true;\r\n+            gameState.turn = \"player\";\r\n+            addMessage(\"Un nuevo enemigo aparece.\");\r\n+            updateUI();\r\n+        } else {\r\n+            // Si fue derrota, volver al menú\r\n+            setTimeout(() => {\r\n+                window.location.href = 'index.html';\r\n+            }, 1000);\r\n+        }\r\n+    }\r\n+    \r\n+    function generateNewEnemy() {\r\n+        // Lista de posibles enemigos\r\n+        const enemies = [\r\n+            {\r\n+                name: \"Espectro Cibernético\",\r\n+                health: 80,\r\n+                attack: 8,\r\n+                defense: 3,\r\n+                exp: 25,\r\n+                credits: 75\r\n+            },\r\n+            {\r\n+                name: \"Dron Centinela\",\r\n+                health: 60,\r\n+                attack: 12,\r\n+                defense: 2,\r\n+                exp: 30,\r\n+                credits: 85\r\n+            },\r\n+            {\r\n+                name: \"Cazador Digital\",\r\n+                health: 100,\r\n+                attack: 7,\r\n+                defense: 5,\r\n+                exp: 35,\r\n+                credits: 90\r\n+            }\r\n+        ];\r\n+        \r\n+        // Seleccionar uno aleatorio\r\n+        const enemyTemplate = enemies[Math.floor(Math.random() * enemies.length)];\r\n+        \r\n+        // Ajustar según nivel del jugador\r\n+        const levelFactor = 1 + (gameState.player.level - 1) * 0.2;\r\n+        \r\n+        // Asignar al estado del juego\r\n+        gameState.enemy = {\r\n+            name: enemyTemplate.name,\r\n+            maxHealth: Math.floor(enemyTemplate.health * levelFactor),\r\n+            health: Math.floor(enemyTemplate.health * levelFactor),\r\n+            attack: Math.floor(enemyTemplate.attack * levelFactor),\r\n+            defense: Math.floor(enemyTemplate.defense * levelFactor),\r\n+            isStunned: false,\r\n+            exp: Math.floor(enemyTemplate.exp * levelFactor),\r\n+            credits: Math.floor(enemyTemplate.credits * levelFactor)\r\n+        };\r\n+        \r\n+        // Actualizar UI para mostrar nuevo enemigo\r\n+        document.getElementById('enemy-name').textContent = gameState.enemy.name;\r\n+        document.getElementById('enemy-health-fill').style.width = '100%';\r\n+        \r\n+        // Cambiar sprite según el enemigo\r\n+        const enemySprite = document.getElementById('enemy-sprite');\r\n+        switch (gameState.enemy.name) {\r\n+            case \"Dron Centinela\":\r\n+                enemySprite.style.backgroundImage = \"url('assets/images/enemies/drone_sentinel.png')\";\r\n+                break;\r\n+            case \"Cazador Digital\":\r\n+                enemySprite.style.backgroundImage = \"url('assets/images/enemies/digital_hunter.png')\";\r\n+                break;\r\n+            default:\r\n+                enemySprite.style.backgroundImage = \"url('assets/images/enemies/cyber_ghoul.png')\";\r\n+        }\r\n+    }\r\n+    \r\n+    function saveGame() {\r\n+        try {\r\n+            // Crear objeto de guardado\r\n+            const saveData = {\r\n+                name: gameState.player.name,\r\n+                level: gameState.player.level,\r\n+                exp: gameState.player.exp,\r\n+                maxHealth: gameState.player.maxHealth,\r\n+                health: gameState.player.health,\r\n+                maxEnergy: gameState.player.maxEnergy,\r\n+                energy: gameState.player.energy,\r\n+                baseAttack: gameState.player.attack,\r\n+                baseDefense: gameState.player.defense,\r\n+                baseSpeed: gameState.player.speed,\r\n+                credits: gameState.player.credits,\r\n+                inventory: gameState.player.inventory,\r\n+                specialization: gameState.player.specialization,\r\n+                lastSave: new Date().toISOString(),\r\n+                location: 'ruinas_tecnologicas'\r\n+            };\r\n+            \r\n+            // Guardar en localStorage\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741038521911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,384 @@\n+<script>\r\n+    // Continuación del script anterior\r\n+    \r\n+    function useSkill() {\r\n+        // ...existing code...\r\n+        \r\n+        switch (gameState.player.specialization) {\r\n+            // ...existing code...\r\n+                \r\n+            case 'purple': // Equilibrado\r\n+                skillName = \"Interferencia Neural\";\r\n+                damage = Math.floor(gameState.player.attack * 0.8);\r\n+                gameState.enemy.health = Math.max(0, gameState.enemy.health - damage);\r\n+                gameState.enemy.isStunned = true;\r\n+                addMessage(`¡Usas ${skillName}! Causas ${damage} puntos de daño al ${gameState.enemy.name} y lo aturdes.`);\r\n+                break;\r\n+                \r\n+            default:\r\n+                skillName = \"Ataque Rápido\";\r\n+                damage = gameState.player.attack;\r\n+                gameState.enemy.health = Math.max(0, gameState.enemy.health - damage);\r\n+                addMessage(`¡Usas ${skillName}! Causas ${damage} puntos de daño al ${gameState.enemy.name}.`);\r\n+                break;\r\n+        }\r\n+        \r\n+        // Animar al jugador\r\n+        document.getElementById('player-sprite').classList.add('attack');\r\n+        setTimeout(() => document.getElementById('player-sprite').classList.remove('attack'), 500);\r\n+        \r\n+        // Animar daño al enemigo\r\n+        setTimeout(() => {\r\n+            document.getElementById('enemy-sprite').classList.add('hit');\r\n+            setTimeout(() => document.getElementById('enemy-sprite').classList.remove('hit'), 300);\r\n+        }, 500);\r\n+        \r\n+        // Actualizar UI\r\n+        setTimeout(() => {\r\n+            updateUI();\r\n+            \r\n+            // Verificar si el enemigo ha sido derrotado\r\n+            if (gameState.enemy.health <= 0) {\r\n+                endCombat(true);\r\n+                return;\r\n+            }\r\n+            \r\n+            // Turno del enemigo\r\n+            gameState.turn = \"enemy\";\r\n+            setTimeout(enemyTurn, 1000);\r\n+        }, 800);\r\n+    }\r\n+    \r\n+    function useItem() {\r\n+        if (gameState.turn !== \"player\" || !gameState.combatActive) return;\r\n+        \r\n+        // Mostrar opciones de inventario en un diálogo\r\n+        const dialog = document.getElementById('dialog-modal');\r\n+        const dialogTitle = document.getElementById('dialog-title');\r\n+        const dialogText = document.getElementById('dialog-text');\r\n+        const dialogConfirm = document.getElementById('dialog-confirm');\r\n+        \r\n+        // Configurar el diálogo\r\n+        dialogTitle.textContent = \"Inventario\";\r\n+        \r\n+        // Crear elementos para cada ítem\r\n+        let html = \"<div class='inventory-dialog'>\";\r\n+        gameState.player.inventory.forEach(item => {\r\n+            html += `<div class='inventory-option' onclick='selectItem(${item.id})'>\r\n+                <div class='item-name'>${item.name}</div>\r\n+                <div class='item-desc'>${item.description}</div>\r\n+            </div>`;\r\n+        });\r\n+        html += \"</div>\";\r\n+        \r\n+        dialogText.innerHTML = html;\r\n+        dialogConfirm.textContent = \"Cancelar\";\r\n+        \r\n+        // Mostrar diálogo\r\n+        dialog.style.display = 'flex';\r\n+    }\r\n+    \r\n+    function selectItem(itemId) {\r\n+        // Cerrar diálogo\r\n+        closeDialog();\r\n+        \r\n+        // Buscar ítem en inventario\r\n+        const item = gameState.player.inventory.find(i => i.id === itemId);\r\n+        if (!item) return;\r\n+        \r\n+        let effect = 0;\r\n+        \r\n+        // Aplicar efecto según tipo de ítem\r\n+        switch(item.type) {\r\n+            case 'heal':\r\n+                effect = Math.min(item.value, gameState.player.maxHealth - gameState.player.health);\r\n+                gameState.player.health += effect;\r\n+                addMessage(`Has usado ${item.name}. Recuperas ${effect} puntos de salud.`);\r\n+                break;\r\n+                \r\n+            case 'energy':\r\n+                effect = Math.min(item.value, gameState.player.maxEnergy - gameState.player.energy);\r\n+                gameState.player.energy += effect;\r\n+                addMessage(`Has usado ${item.name}. Recuperas ${effect} puntos de energía.`);\r\n+                break;\r\n+                \r\n+            case 'damage':\r\n+                effect = Math.max(1, item.value - gameState.enemy.defense);\r\n+                gameState.enemy.health = Math.max(0, gameState.enemy.health - effect);\r\n+                addMessage(`Has usado ${item.name} contra el enemigo. Causas ${effect} puntos de daño.`);\r\n+                \r\n+                // Animar daño al enemigo\r\n+                document.getElementById('enemy-sprite').classList.add('hit');\r\n+                setTimeout(() => document.getElementById('enemy-sprite').classList.remove('hit'), 300);\r\n+                break;\r\n+        }\r\n+        \r\n+        // Eliminar el ítem usado\r\n+        const itemIndex = gameState.player.inventory.findIndex(i => i.id === itemId);\r\n+        if (itemIndex !== -1) {\r\n+            gameState.player.inventory.splice(itemIndex, 1);\r\n+        }\r\n+        \r\n+        // Actualizar UI\r\n+        updateUI();\r\n+        \r\n+        // Verificar si el enemigo ha sido derrotado\r\n+        if (gameState.enemy.health <= 0) {\r\n+            endCombat(true);\r\n+            return;\r\n+        }\r\n+        \r\n+        // Pasar turno al enemigo\r\n+        gameState.turn = \"enemy\";\r\n+        setTimeout(enemyTurn, 1000);\r\n+    }\r\n+    \r\n+    function defend() {\r\n+        if (gameState.turn !== \"player\" || !gameState.combatActive) return;\r\n+        \r\n+        // Aumentar defensa temporalmente\r\n+        const defenseBonus = Math.floor(gameState.player.defense * 0.5);\r\n+        gameState.player.defense += defenseBonus;\r\n+        gameState.player.defending = true;\r\n+        \r\n+        addMessage(`Te has puesto en posición defensiva. Tu defensa aumenta ${defenseBonus} puntos.`);\r\n+        \r\n+        // Turno del enemigo\r\n+        gameState.turn = \"enemy\";\r\n+        setTimeout(enemyTurn, 1000);\r\n+    }\r\n+    \r\n+    function enemyTurn() {\r\n+        if (!gameState.combatActive) return;\r\n+        \r\n+        // Verificar si el enemigo está aturdido\r\n+        if (gameState.enemy.isStunned) {\r\n+            addMessage(`${gameState.enemy.name} está aturdido y no puede atacar este turno.`);\r\n+            gameState.enemy.isStunned = false; // Recuperarse del aturdimiento\r\n+            gameState.turn = \"player\";\r\n+            return;\r\n+        }\r\n+        \r\n+        // El enemigo ataca\r\n+        const damage = Math.max(1, gameState.enemy.attack - gameState.player.defense);\r\n+        gameState.player.health = Math.max(0, gameState.player.health - damage);\r\n+        \r\n+        // Mensaje\r\n+        addMessage(`${gameState.enemy.name} te ataca y causa ${damage} puntos de daño.`);\r\n+        \r\n+        // Animar daño al jugador\r\n+        document.getElementById('player-sprite').classList.add('hit');\r\n+        setTimeout(() => document.getElementById('player-sprite').classList.remove('hit'), 300);\r\n+        \r\n+        // Si el jugador estaba defendiendo, quitar el bono de defensa\r\n+        if (gameState.player.defending) {\r\n+            const defenseBonus = Math.floor(gameState.player.defense * 0.5 / 1.5);\r\n+            gameState.player.defense -= defenseBonus;\r\n+            gameState.player.defending = false;\r\n+        }\r\n+        \r\n+        // Actualizar UI\r\n+        updateUI();\r\n+        \r\n+        // Verificar si el jugador ha sido derrotado\r\n+        if (gameState.player.health <= 0) {\r\n+            endCombat(false);\r\n+            return;\r\n+        }\r\n+        \r\n+        // Devolver turno al jugador\r\n+        gameState.turn = \"player\";\r\n+    }\r\n+    \r\n+    function endCombat(victory) {\r\n+        gameState.combatActive = false;\r\n+        \r\n+        const resultModal = document.getElementById('combat-result-modal');\r\n+        const resultTitle = document.getElementById('result-title');\r\n+        const resultText = document.getElementById('result-text');\r\n+        \r\n+        if (victory) {\r\n+            // Victoria\r\n+            resultTitle.textContent = '¡Victoria!';\r\n+            \r\n+            // Calcular recompensas\r\n+            const expGained = gameState.enemy.exp;\r\n+            const creditsGained = gameState.enemy.credits;\r\n+            \r\n+            // Actualizar estadísticas del jugador\r\n+            gameState.player.exp += expGained;\r\n+            gameState.player.credits += creditsGained;\r\n+            \r\n+            // Verificar subida de nivel\r\n+            let levelUpText = '';\r\n+            if (gameState.player.exp >= gameState.player.nextLevelExp) {\r\n+                const oldLevel = gameState.player.level;\r\n+                gameState.player.level++;\r\n+                gameState.player.exp -= gameState.player.nextLevelExp;\r\n+                gameState.player.nextLevelExp = 100 * Math.pow(1.5, gameState.player.level - 1);\r\n+                gameState.player.attack += 2;\r\n+                gameState.player.defense += 1;\r\n+                gameState.player.maxHealth += 10;\r\n+                gameState.player.health = gameState.player.maxHealth; // Recuperación total\r\n+                \r\n+                levelUpText = `<p style=\"color: var(--gothic-gold); margin-top: 10px;\">¡Has subido al nivel ${gameState.player.level}!</p>\r\n+                <p>Ataque +2</p>\r\n+                <p>Defensa +1</p>\r\n+                <p>Salud Máxima +10</p>`;\r\n+            }\r\n+            \r\n+            // Item aleatorio como recompensa\r\n+            const randomItems = [\r\n+                { name: \"Poción de salud\", type: \"heal\", value: 30, description: \"Restaura 30 puntos de salud\" },\r\n+                { name: \"Granada EMP\", type: \"damage\", value: 25, description: \"Causa 25 puntos de daño al enemigo\" },\r\n+                { name: \"Estimulante neural\", type: \"energy\", value: 20, description: \"Restaura 20 puntos de energía\" },\r\n+                { name: \"Fragmento de datos\", type: \"quest\", value: 1, description: \"Componente para mejoras\" }\r\n+            ];\r\n+            \r\n+            const randomItem = randomItems[Math.floor(Math.random() * randomItems.length)];\r\n+            const newItemId = Date.now(); // ID único basado en timestamp\r\n+            randomItem.id = newItemId;\r\n+            gameState.player.inventory.push(randomItem);\r\n+            \r\n+            // Mostrar texto de resultado\r\n+            resultText.innerHTML = `\r\n+                Has derrotado a ${gameState.enemy.name}.\r\n+                <div style=\"margin-top: 15px;\">\r\n+                    <p>Recompensas:</p>\r\n+                    <ul style=\"list-style-type: none; padding-left: 20px;\">\r\n+                        <li>+ ${expGained} EXP</li>\r\n+                        <li>+ ${creditsGained} Créditos</li>\r\n+                        <li>+ ${randomItem.name}</li>\r\n+                    </ul>\r\n+                    ${levelUpText}\r\n+                </div>\r\n+            `;\r\n+            \r\n+        } else {\r\n+            // Derrota\r\n+            resultTitle.textContent = '¡Derrota!';\r\n+            resultText.innerHTML = `\r\n+                Has sido derrotado por ${gameState.enemy.name}.\r\n+                <div style=\"margin-top: 15px;\">\r\n+                    <p>Pierdes ${Math.floor(gameState.player.credits * 0.1)} créditos en el combate.</p>\r\n+                </div>\r\n+            `;\r\n+            \r\n+            // Penalización por derrota\r\n+            gameState.player.credits = Math.floor(gameState.player.credits * 0.9);\r\n+            gameState.player.health = Math.floor(gameState.player.maxHealth * 0.3); // Recuperación parcial\r\n+        }\r\n+        \r\n+        // Mostrar modal\r\n+        resultModal.style.display = 'flex';\r\n+        \r\n+        // Guardar progreso\r\n+        saveGame();\r\n+    }\r\n+    \r\n+    function continueBattle() {\r\n+        // Cerrar modal\r\n+        document.getElementById('combat-result-modal').style.display = 'none';\r\n+        \r\n+        // Si fue victoria, generar nuevo enemigo\r\n+        if (gameState.player.health > 0) {\r\n+            generateNewEnemy();\r\n+            gameState.combatActive = true;\r\n+            gameState.turn = \"player\";\r\n+            addMessage(\"Un nuevo enemigo aparece.\");\r\n+            updateUI();\r\n+        } else {\r\n+            // Si fue derrota, volver al menú\r\n+            setTimeout(() => {\r\n+                window.location.href = 'index.html';\r\n+            }, 1000);\r\n+        }\r\n+    }\r\n+    \r\n+    function generateNewEnemy() {\r\n+        // Lista de posibles enemigos\r\n+        const enemies = [\r\n+            {\r\n+                name: \"Espectro Cibernético\",\r\n+                health: 80,\r\n+                attack: 8,\r\n+                defense: 3,\r\n+                exp: 25,\r\n+                credits: 75\r\n+            },\r\n+            {\r\n+                name: \"Dron Centinela\",\r\n+                health: 60,\r\n+                attack: 12,\r\n+                defense: 2,\r\n+                exp: 30,\r\n+                credits: 85\r\n+            },\r\n+            {\r\n+                name: \"Cazador Digital\",\r\n+                health: 100,\r\n+                attack: 7,\r\n+                defense: 5,\r\n+                exp: 35,\r\n+                credits: 90\r\n+            }\r\n+        ];\r\n+        \r\n+        // Seleccionar uno aleatorio\r\n+        const enemyTemplate = enemies[Math.floor(Math.random() * enemies.length)];\r\n+        \r\n+        // Ajustar según nivel del jugador\r\n+        const levelFactor = 1 + (gameState.player.level - 1) * 0.2;\r\n+        \r\n+        // Asignar al estado del juego\r\n+        gameState.enemy = {\r\n+            name: enemyTemplate.name,\r\n+            maxHealth: Math.floor(enemyTemplate.health * levelFactor),\r\n+            health: Math.floor(enemyTemplate.health * levelFactor),\r\n+            attack: Math.floor(enemyTemplate.attack * levelFactor),\r\n+            defense: Math.floor(enemyTemplate.defense * levelFactor),\r\n+            isStunned: false,\r\n+            exp: Math.floor(enemyTemplate.exp * levelFactor),\r\n+            credits: Math.floor(enemyTemplate.credits * levelFactor)\r\n+        };\r\n+        \r\n+        // Actualizar UI para mostrar nuevo enemigo\r\n+        document.getElementById('enemy-name').textContent = gameState.enemy.name;\r\n+        document.getElementById('enemy-health-fill').style.width = '100%';\r\n+        \r\n+        // Cambiar sprite según el enemigo\r\n+        const enemySprite = document.getElementById('enemy-sprite');\r\n+        switch (gameState.enemy.name) {\r\n+            case \"Dron Centinela\":\r\n+                enemySprite.style.backgroundImage = \"url('assets/images/enemies/drone_sentinel.png')\";\r\n+                break;\r\n+            case \"Cazador Digital\":\r\n+                enemySprite.style.backgroundImage = \"url('assets/images/enemies/digital_hunter.png')\";\r\n+                break;\r\n+            default:\r\n+                enemySprite.style.backgroundImage = \"url('assets/images/enemies/cyber_ghoul.png')\";\r\n+        }\r\n+    }\r\n+    \r\n+    function saveGame() {\r\n+        try {\r\n+            // Crear objeto de guardado\r\n+            const saveData = {\r\n+                name: gameState.player.name,\r\n+                level: gameState.player.level,\r\n+                exp: gameState.player.exp,\r\n+                maxHealth: gameState.player.maxHealth,\r\n+                health: gameState.player.health,\r\n+                maxEnergy: gameState.player.maxEnergy,\r\n+                energy: gameState.player.energy,\r\n+                baseAttack: gameState.player.attack,\r\n+                baseDefense: gameState.player.defense,\r\n+                baseSpeed: gameState.player.speed,\r\n+                credits: gameState.player.credits,\r\n+                inventory: gameState.player.inventory,\r\n+                specialization: gameState.player.specialization,\r\n+                lastSave: new Date().toISOString(),\r\n+                location: 'ruinas_tecnologicas'\r\n+            };\r\n+            \r\n+            // Guardar en localStorage\n\\ No newline at end of file\n"
                }
            ],
            "date": 1741038271282,
            "name": "Commit-0",
            "content": "<script>\r\n    // Continuación del script anterior\r\n    \r\n    function useSkill() {\r\n        // ...existing code...\r\n        \r\n        switch (gameState.player.specialization) {\r\n            // ...existing code...\r\n                \r\n            case 'purple': // Equilibrado\r\n                skillName = \"Interferencia Neural\";\r\n                damage = Math.floor(gameState.player.attack * 0.8);\r\n                gameState.enemy.health = Math.max(0, gameState.enemy.health - damage);\r\n                gameState.enemy.isStunned = true;\r\n                addMessage(`¡Usas ${skillName}! Causas ${damage} puntos de daño al ${gameState.enemy.name} y lo aturdes.`);\r\n                break;\r\n                \r\n            default:\r\n                skillName = \"Ataque Rápido\";\r\n                damage = gameState.player.attack;\r\n                gameState.enemy.health = Math.max(0, gameState.enemy.health - damage);\r\n                addMessage(`¡Usas ${skillName}! Causas ${damage} puntos de daño al ${gameState.enemy.name}.`);\r\n                break;\r\n        }\r\n        \r\n        // Animar al jugador\r\n        document.getElementById('player-sprite').classList.add('attack');\r\n        setTimeout(() => document.getElementById('player-sprite').classList.remove('attack'), 500);\r\n        \r\n        // Animar daño al enemigo\r\n        setTimeout(() => {\r\n            document.getElementById('enemy-sprite').classList.add('hit');"
        }
    ]
}