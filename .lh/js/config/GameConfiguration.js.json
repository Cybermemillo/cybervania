{
    "sourceFile": "js/config/GameConfiguration.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741029778476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741029778476,
            "name": "Commit-0",
            "content": "/**\r\n * Gestor de configuración del juego\r\n */\r\nexport class GameConfiguration {\r\n    constructor() {\r\n        // Configuración por defecto\r\n        this.defaults = {\r\n            audio: {\r\n                masterVolume: 1.0,\r\n                musicVolume: 0.7,\r\n                sfxVolume: 0.8,\r\n                voiceVolume: 0.8,\r\n                ambientVolume: 0.6\r\n            },\r\n            display: {\r\n                fullscreen: false,\r\n                visualQuality: 'high',  // high, medium, low\r\n                resolution: 'native',\r\n                vSync: true,\r\n                targetFPS: 60,         // 30, 60, 120, unlimited\r\n                screenShake: true,\r\n                cameraSmoothing: true\r\n            },\r\n            accessibility: {\r\n                highContrast: false,\r\n                textSize: 'medium',    // small, medium, large\r\n                colorblindMode: 'off', // off, protanopia, deuteranopia, tritanopia\r\n                subtitles: true,\r\n                reducedMotion: false,\r\n                dyslexicFont: false\r\n            },\r\n            gameplay: {\r\n                difficulty: 'normal',  // easy, normal, hard\r\n                autoSave: true,\r\n                tutorialHints: true,\r\n                combatSpeed: 'normal', // slow, normal, fast\r\n                aimAssist: false\r\n            },\r\n            controls: {\r\n                keyBindings: {\r\n                    moveUp: 'w',\r\n                    moveLeft: 'a',\r\n                    moveDown: 's',\r\n                    moveRight: 'd',\r\n                    interact: 'e',\r\n                    attack: ' ',\r\n                    special: 'q',\r\n                    inventory: 'i',\r\n                    menu: 'esc'\r\n                },\r\n                mouseInvert: false,\r\n                mouseSensitivity: 5   // 1-10\r\n            },\r\n            language: 'es'            // es, en, fr, ...\r\n        };\r\n        \r\n        // Cargar configuración guardada\r\n        this.settings = this.load();\r\n    }\r\n    \r\n    /**\r\n     * Carga la configuración desde localStorage\r\n     */\r\n    load() {\r\n        try {\r\n            const savedConfig = localStorage.getItem('cybervania_config');\r\n            if (savedConfig) {\r\n                // Fusionar con valores por defecto\r\n                return this.mergeDeep(\r\n                    this.defaults, \r\n                    JSON.parse(savedConfig)\r\n                );\r\n            }\r\n        } catch (e) {\r\n            console.error('Error cargando configuración:', e);\r\n        }\r\n        \r\n        // Si falla o no hay configuración, usar valores por defecto\r\n        return {...this.defaults};\r\n    }\r\n    \r\n    /**\r\n     * Guarda la configuración en localStorage\r\n     */\r\n    save() {\r\n        try {\r\n            localStorage.setItem('cybervania_config', JSON.stringify(this.settings));\r\n            return true;\r\n        } catch (e) {\r\n            console.error('Error guardando configuración:', e);\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Restablece toda la configuración a valores por defecto\r\n     */\r\n    resetToDefaults() {\r\n        this.settings = {...this.defaults};\r\n        return this.save();\r\n    }\r\n    \r\n    /**\r\n     * Obtiene un valor de configuración\r\n     */\r\n    get(path) {\r\n        // Dividir la ruta por puntos (ej: 'audio.musicVolume')\r\n        const keys = path.split('.');\r\n        let result = this.settings;\r\n        \r\n        // Navegar por el objeto\r\n        for (const key of keys) {\r\n            if (result[key] === undefined) return undefined;\r\n            result = result[key];\r\n        }\r\n        \r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * Establece un valor de configuración\r\n     */\r\n    set(path, value) {\r\n        // Dividir la ruta por puntos\r\n        const keys = path.split('.');\r\n        let obj = this.settings;\r\n        \r\n        // Navegar hasta el penúltimo nivel\r\n        for (let i = 0; i < keys.length - 1; i++) {\r\n            const key = keys[i];\r\n            if (!obj[key]) obj[key] = {};\r\n            obj = obj[key];\r\n        }\r\n        \r\n        // Establecer el valor\r\n        obj[keys[keys.length - 1]] = value;\r\n        \r\n        // Guardar cambios\r\n        return this.save();\r\n    }\r\n    \r\n    /**\r\n     * Aplica un objeto de configuraciones\r\n     */\r\n    applyBulk(configObj) {\r\n        // Fusionar con la configuración actual\r\n        this.settings = this.mergeDeep(this.settings, configObj);\r\n        return this.save();\r\n    }\r\n    \r\n    /**\r\n     * Fusiona dos objetos profundamente\r\n     */\r\n    mergeDeep(target, source) {\r\n        const output = Object.assign({}, target);\r\n        if (this.isObject(target) && this.isObject(source)) {\r\n            Object.keys(source).forEach(key => {\r\n                if (this.isObject(source[key])) {\r\n                    if (!(key in target)) {\r\n                        Object.assign(output, { [key]: source[key] });\r\n                    } else {\r\n                        output[key] = this.mergeDeep(target[key], source[key]);\r\n                    }\r\n                } else {\r\n                    Object.assign(output, { [key]: source[key] });\r\n                }\r\n            });\r\n        }\r\n        return output;\r\n    }\r\n    \r\n    /**\r\n     * Verifica si un valor es un objeto\r\n     */\r\n    isObject(item) {\r\n        return (item && typeof item === 'object' && !Array.isArray(item));\r\n    }\r\n    \r\n    /**\r\n     * Exporta la configuración actual\r\n     */\r\n    exportConfig() {\r\n        return JSON.stringify(this.settings);\r\n    }\r\n    \r\n    /**\r\n     * Importa una configuración\r\n     */\r\n    importConfig(jsonString) {\r\n        try {\r\n            const config = JSON.parse(jsonString);\r\n            this.settings = this.mergeDeep(this.defaults, config);\r\n            return this.save();\r\n        } catch (e) {\r\n            console.error('Error importando configuración:', e);\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Aplica la configuración a los sistemas del juego\r\n     */\r\n    applyToSystems() {\r\n        if (window.cybervaniaSettings) {\r\n            // Aplicar opciones de audio\r\n            if (window.cybervaniaSettings.audioManager) {\r\n                const audio = this.settings.audio;\r\n                window.cybervaniaSettings.audioManager.setMasterVolume(audio.masterVolume);\r\n                window.cybervaniaSettings.audioManager.setMusicVolume(audio.musicVolume);\r\n                window.cybervaniaSettings.audioManager.setSFXVolume(audio.sfxVolume);\r\n            }\r\n            \r\n            // Aplicar opciones visuales\r\n            if (window.cybervaniaSettings.menuEffects) {\r\n                const display = this.settings.display;\r\n                window.cybervaniaSettings.menuEffects.updateMistEffects(display.visualQuality);\r\n                window.cybervaniaSettings.menuEffects.updateEffectsIntensity(\r\n                    display.visualQuality === 'low' ? 0.3 : \r\n                    display.visualQuality === 'medium' ? 0.6 : 1.0\r\n                );\r\n                window.cybervaniaSettings.menuEffects.setTargetFPS(display.targetFPS);\r\n            }\r\n            \r\n            // Aplicar opciones de accesibilidad\r\n            const accessibility = this.settings.accessibility;\r\n            if (accessibility.highContrast && window.cybervaniaSettings.menuEffects) {\r\n                window.cybervaniaSettings.menuEffects.toggleHighContrast(accessibility.highContrast);\r\n            }\r\n            \r\n            // Aplicar idioma\r\n            document.documentElement.setAttribute('lang', this.settings.language);\r\n        }\r\n    }\r\n}\r\n\r\n// Instancia singleton para toda la aplicación\r\nlet configInstance = null;\r\n\r\nexport function getGameConfiguration() {\r\n    if (!configInstance) {\r\n        configInstance = new GameConfiguration();\r\n    }\r\n    return configInstance;\r\n}\r\n"
        }
    ]
}