{
    "sourceFile": "js/ui/MainMenu.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1741025792728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741028005755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -765,5 +765,31 @@\n             case 'purple': return 'Equilibrado';\r\n             default: return 'Desconocido';\r\n         }\r\n     }\r\n+\r\n+    createTitle() {\r\n+        const titleContainer = document.createElement('div');\r\n+        titleContainer.className = 'title-container';\r\n+        \r\n+        const title = document.createElement('h1');\r\n+        // Opción 1: Texto normal en mayúsculas (como estaba)\r\n+        title.textContent = 'CYBERVANIA';\r\n+        \r\n+        /* Alternativas para mayor legibilidad:\r\n+        // Opción 2: Formato CamelCase para mejor legibilidad\r\n+        // title.textContent = 'CyberVania';\r\n+        \r\n+        // Opción 3: Primera letra en mayúscula, resto en minúsculas\r\n+        // title.textContent = 'Cybervania';\r\n+        */\r\n+        \r\n+        title.setAttribute('data-text', title.textContent);\r\n+        \r\n+        const subtitle = document.createElement('h2');\r\n+        subtitle.textContent = 'Donde la oscuridad se encuentra con el código';\r\n+        \r\n+        titleContainer.appendChild(title);\r\n+        titleContainer.appendChild(subtitle);\r\n+        this.container.appendChild(titleContainer);\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1741028555196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,30 +165,134 @@\n         nameInput.placeholder = 'Ingresa tu nombre...';\r\n         nameInput.maxLength = 15;\r\n         nameInput.addEventListener('input', (e) => {\r\n             this.playerNameInput = e.target.value;\r\n+            this.updateCharacterPreview();\r\n         });\r\n         \r\n         nameField.appendChild(nameLabel);\r\n         nameField.appendChild(nameInput);\r\n         newGameScreen.appendChild(nameField);\r\n         \r\n-        // Selección de especialización\r\n+        // Selección de sexo (nuevo)\r\n+        const genderField = document.createElement('div');\r\n+        genderField.className = 'form-group gender-selection';\r\n+        \r\n+        const genderLabel = document.createElement('label');\r\n+        genderLabel.textContent = 'Selecciona tu identidad:';\r\n+        genderField.appendChild(genderLabel);\r\n+        \r\n+        const genderOptions = document.createElement('div');\r\n+        genderOptions.className = 'gender-options';\r\n+        \r\n+        // Opción Masculino\r\n+        const maleOption = document.createElement('div');\r\n+        maleOption.className = 'gender-option';\r\n+        maleOption.dataset.gender = 'male';\r\n+        \r\n+        const maleIcon = document.createElement('div');\r\n+        maleIcon.className = 'gender-icon male';\r\n+        maleIcon.innerHTML = `<svg viewBox=\"0 0 24 24\" width=\"40\" height=\"40\">\r\n+            <circle cx=\"12\" cy=\"8\" r=\"5\" fill=\"none\" stroke=\"#1fa7ff\" stroke-width=\"1.5\"/>\r\n+            <path d=\"M12,13 L12,21 M8,17 L16,17\" stroke=\"#1fa7ff\" stroke-width=\"1.5\"/>\r\n+            <path d=\"M17,3 L17,7 M15,5 L19,5\" stroke=\"#1fa7ff\" stroke-width=\"1.5\"/>\r\n+        </svg>`;\r\n+        \r\n+        const maleLabel = document.createElement('span');\r\n+        maleLabel.textContent = 'Hombre';\r\n+        \r\n+        maleOption.appendChild(maleIcon);\r\n+        maleOption.appendChild(maleLabel);\r\n+        \r\n+        // Opción Femenino\r\n+        const femaleOption = document.createElement('div');\r\n+        femaleOption.className = 'gender-option';\r\n+        femaleOption.dataset.gender = 'female';\r\n+        \r\n+        const femaleIcon = document.createElement('div');\r\n+        femaleIcon.className = 'gender-icon female';\r\n+        femaleIcon.innerHTML = `<svg viewBox=\"0 0 24 24\" width=\"40\" height=\"40\">\r\n+            <circle cx=\"12\" cy=\"8\" r=\"5\" fill=\"none\" stroke=\"#ff3a4a\" stroke-width=\"1.5\"/>\r\n+            <path d=\"M12,13 L12,21\" stroke=\"#ff3a4a\" stroke-width=\"1.5\"/>\r\n+            <path d=\"M8,17 L16,17\" stroke=\"#ff3a4a\" stroke-width=\"1.5\"/>\r\n+            <circle cx=\"12\" cy=\"21\" r=\"2\" fill=\"none\" stroke=\"#ff3a4a\" stroke-width=\"1.5\"/>\r\n+        </svg>`;\r\n+        \r\n+        const femaleLabel = document.createElement('span');\r\n+        femaleLabel.textContent = 'Mujer';\r\n+        \r\n+        femaleOption.appendChild(femaleIcon);\r\n+        femaleOption.appendChild(femaleLabel);\r\n+        \r\n+        genderOptions.appendChild(maleOption);\r\n+        genderOptions.appendChild(femaleOption);\r\n+        genderField.appendChild(genderOptions);\r\n+        \r\n+        // Evento de selección de género\r\n+        genderOptions.addEventListener('click', (e) => {\r\n+            const option = e.target.closest('.gender-option');\r\n+            if (option) {\r\n+                document.querySelectorAll('.gender-option').forEach(opt => {\r\n+                    opt.classList.remove('selected');\r\n+                });\r\n+                option.classList.add('selected');\r\n+                this.selectedGender = option.dataset.gender;\r\n+                this.updateCharacterPreview();\r\n+                this.playSelectSound();\r\n+            }\r\n+        });\r\n+        \r\n+        newGameScreen.appendChild(genderField);\r\n+        \r\n+        // Selección de especialización mejorada\r\n         const specContainer = document.createElement('div');\r\n         specContainer.className = 'specialization-container';\r\n         \r\n         const specTitle = document.createElement('h4');\r\n         specTitle.textContent = 'Especialización';\r\n         specContainer.appendChild(specTitle);\r\n         \r\n-        // Tarjetas de especialización\r\n+        // Tarjetas de especialización mejoradas\r\n         const specCards = document.createElement('div');\r\n         specCards.className = 'spec-cards';\r\n         \r\n         const specializations = [\r\n-            { id: 'red', name: 'Ofensivo', desc: 'Enfocado en ataques poderosos' },\r\n-            { id: 'blue', name: 'Defensivo', desc: 'Mayor resistencia y supervivencia' },\r\n-            { id: 'purple', name: 'Equilibrado', desc: 'Versatilidad y adaptabilidad' }\r\n+            { \r\n+                id: 'blue', \r\n+                name: 'Blue Team', \r\n+                desc: 'Especializado en defensa y seguridad. Mayor resistencia y supervivencia.',\r\n+                stats: {\r\n+                    health: '+15%',\r\n+                    defense: '+20%',\r\n+                    attack: '-5%',\r\n+                    actionPoints: '3'\r\n+                },\r\n+                lore: 'Los Blue Team son expertos en protección y resistencia. Especializados en defender sistemas contra ataques externos y mantener las defensas en pie cuando todo lo demás falla.'\r\n+            },\r\n+            { \r\n+                id: 'red', \r\n+                name: 'Red Team', \r\n+                desc: 'Especializado en ataque y penetración. Daño superior a costa de defensa.',\r\n+                stats: {\r\n+                    health: '-5%',\r\n+                    defense: '-10%',\r\n+                    attack: '+25%',\r\n+                    actionPoints: '3'\r\n+                },\r\n+                lore: 'Los Red Team son maestros del asalto digital. Rompen defensas e inutilizan sistemas con precisión quirúrgica, sacrificando su propia seguridad por potencia ofensiva.'\r\n+            },\r\n+            { \r\n+                id: 'purple', \r\n+                name: 'Purple Team', \r\n+                desc: 'Equilibrio entre ataque y defensa. Adaptabilidad y versatilidad táctica.',\r\n+                stats: {\r\n+                    health: '+5%',\r\n+                    defense: '+5%',\r\n+                    attack: '+5%',\r\n+                    actionPoints: '4'\r\n+                },\r\n+                lore: 'Los Purple Team combinan lo mejor de ambos mundos. Son adaptables, versátiles y cuentan con un punto de acción extra que les permite desplegar estrategias más complejas.'\r\n+            }\r\n         ];\r\n         \r\n         specializations.forEach(spec => {\r\n             const card = document.createElement('div');\r\n@@ -200,11 +304,53 @@\n             \r\n             const cardDesc = document.createElement('p');\r\n             cardDesc.textContent = spec.desc;\r\n             \r\n+            // Añadir estadísticas visuales\r\n+            const cardStats = document.createElement('div');\r\n+            cardStats.className = 'spec-stats';\r\n+            \r\n+            for (const [key, value] of Object.entries(spec.stats)) {\r\n+                const statItem = document.createElement('div');\r\n+                statItem.className = 'stat-item';\r\n+                \r\n+                const statName = document.createElement('span');\r\n+                statName.className = 'stat-name';\r\n+                statName.textContent = this.formatStatName(key);\r\n+                \r\n+                const statValue = document.createElement('span');\r\n+                statValue.className = 'stat-value';\r\n+                \r\n+                // Colorear valores según sean positivos o negativos\r\n+                if (value.startsWith('+')) {\r\n+                    statValue.classList.add('stat-positive');\r\n+                } else if (value.startsWith('-')) {\r\n+                    statValue.classList.add('stat-negative');\r\n+                }\r\n+                \r\n+                statValue.textContent = value;\r\n+                \r\n+                statItem.appendChild(statName);\r\n+                statItem.appendChild(statValue);\r\n+                cardStats.appendChild(statItem);\r\n+            }\r\n+            \r\n             card.appendChild(cardTitle);\r\n             card.appendChild(cardDesc);\r\n+            card.appendChild(cardStats);\r\n             \r\n+            // Tooltip con información adicional\r\n+            const tooltipIcon = document.createElement('div');\r\n+            tooltipIcon.className = 'tooltip-icon';\r\n+            tooltipIcon.textContent = '?';\r\n+            \r\n+            const tooltip = document.createElement('div');\r\n+            tooltip.className = 'spec-tooltip';\r\n+            tooltip.textContent = spec.lore;\r\n+            \r\n+            tooltipIcon.appendChild(tooltip);\r\n+            card.appendChild(tooltipIcon);\r\n+            \r\n             card.addEventListener('click', () => {\r\n                 // Eliminar selección anterior\r\n                 document.querySelectorAll('.spec-card').forEach(c => {\r\n                     c.classList.remove('selected');\r\n@@ -212,8 +358,9 @@\n                 \r\n                 // Seleccionar nueva\r\n                 card.classList.add('selected');\r\n                 this.selectedSpecialization = spec.id;\r\n+                this.updateCharacterPreview();\r\n                 this.playSelectSound();\r\n             });\r\n             \r\n             specCards.appendChild(card);\r\n@@ -221,8 +368,54 @@\n         \r\n         specContainer.appendChild(specCards);\r\n         newGameScreen.appendChild(specContainer);\r\n         \r\n+        // Vista previa del personaje (nuevo)\r\n+        const previewContainer = document.createElement('div');\r\n+        previewContainer.className = 'character-preview-container';\r\n+        \r\n+        const previewTitle = document.createElement('h4');\r\n+        previewTitle.textContent = 'Vista previa';\r\n+        previewContainer.appendChild(previewTitle);\r\n+        \r\n+        const previewContent = document.createElement('div');\r\n+        previewContent.className = 'character-preview';\r\n+        previewContent.innerHTML = '<div class=\"character-avatar\"><div class=\"silhouette\"></div></div>';\r\n+        \r\n+        const previewDetails = document.createElement('div');\r\n+        previewDetails.className = 'character-details';\r\n+        previewDetails.innerHTML = `\r\n+            <p class=\"preview-name\">---</p>\r\n+            <p class=\"preview-class\">Selecciona una especialización</p>\r\n+            <p class=\"preview-description\">La vista previa de tu personaje aparecerá aquí.</p>\r\n+        `;\r\n+        \r\n+        previewContent.appendChild(previewDetails);\r\n+        previewContainer.appendChild(previewContent);\r\n+        \r\n+        newGameScreen.appendChild(previewContainer);\r\n+        \r\n+        // Sección de motivación o trasfondo (opcional)\r\n+        const backstoryField = document.createElement('div');\r\n+        backstoryField.className = 'form-group';\r\n+        \r\n+        const backstoryLabel = document.createElement('label');\r\n+        backstoryLabel.textContent = 'Motivación (opcional):';\r\n+        backstoryLabel.htmlFor = 'player-backstory';\r\n+        \r\n+        const backstoryInput = document.createElement('textarea');\r\n+        backstoryInput.id = 'player-backstory';\r\n+        backstoryInput.placeholder = 'Describe brevemente la motivación de tu personaje...';\r\n+        backstoryInput.maxLength = 200;\r\n+        backstoryInput.rows = 3;\r\n+        backstoryInput.addEventListener('input', (e) => {\r\n+            this.playerBackstory = e.target.value;\r\n+        });\r\n+        \r\n+        backstoryField.appendChild(backstoryLabel);\r\n+        backstoryField.appendChild(backstoryInput);\r\n+        newGameScreen.appendChild(backstoryField);\r\n+        \r\n         // Botones de acción\r\n         const actionButtons = document.createElement('div');\r\n         actionButtons.className = 'action-buttons';\r\n         \r\n@@ -591,17 +784,24 @@\n             this.showNotification('Debes ingresar un nombre');\r\n             return;\r\n         }\r\n         \r\n+        if (!this.selectedGender) {\r\n+            this.showNotification('Selecciona una identidad');\r\n+            return;\r\n+        }\r\n+        \r\n         if (this.selectedSpecialization === 'neutral') {\r\n             this.showNotification('Selecciona una especialización');\r\n             return;\r\n         }\r\n         \r\n         // Crear jugador y comenzar partida\r\n         const player = Player.startNewGame(\r\n             this.playerNameInput.trim(),\r\n-            this.selectedSpecialization\r\n+            this.selectedSpecialization,\r\n+            this.selectedGender,\r\n+            this.playerBackstory || ''\r\n         );\r\n         \r\n         // Aquí iría la lógica para iniciar el juego con el player creado\r\n         console.log('¡Iniciando nueva partida!', player);\r\n@@ -791,5 +991,123 @@\n         titleContainer.appendChild(title);\r\n         titleContainer.appendChild(subtitle);\r\n         this.container.appendChild(titleContainer);\r\n     }\r\n+\r\n+    // Método para formatear nombres de estadísticas\r\n+    formatStatName(key) {\r\n+        const names = {\r\n+            'health': 'Salud',\r\n+            'defense': 'Defensa',\r\n+            'attack': 'Ataque',\r\n+            'actionPoints': 'Puntos de acción'\r\n+        };\r\n+        return names[key] || key;\r\n+    }\r\n+\r\n+    // Método para actualizar la vista previa del personaje\r\n+    updateCharacterPreview() {\r\n+        const preview = document.querySelector('.character-preview');\r\n+        if (!preview) return;\r\n+        \r\n+        const nameElement = preview.querySelector('.preview-name');\r\n+        const classElement = preview.querySelector('.preview-class');\r\n+        const descriptionElement = preview.querySelector('.preview-description');\r\n+        const avatar = preview.querySelector('.character-avatar');\r\n+        \r\n+        // Actualizar nombre\r\n+        nameElement.textContent = this.playerNameInput || '---';\r\n+        \r\n+        // Actualizar clase y descripción\r\n+        let className = 'Sin especificar';\r\n+        let description = 'Selecciona una especialización y género para ver detalles.';\r\n+        \r\n+        // Determinar clase según especialización seleccionada\r\n+        if (this.selectedSpecialization === 'red') {\r\n+            className = 'Red Team - Ofensivo';\r\n+            description = 'Especialista en penetración y ataque digital. Mayor daño pero más vulnerable.';\r\n+        } else if (this.selectedSpecialization === 'blue') {\r\n+            className = 'Blue Team - Defensivo';\r\n+            description = 'Experto en seguridad y protección. Mayor resistencia a ataques.';\r\n+        } else if (this.selectedSpecialization === 'purple') {\r\n+            className = 'Purple Team - Equilibrado';\r\n+            description = 'Dominio de técnicas ofensivas y defensivas. Mayor versatilidad táctica.';\r\n+        }\r\n+        \r\n+        classElement.textContent = className;\r\n+        descriptionElement.textContent = description;\r\n+        \r\n+        // Actualizar avatar según género y especialización\r\n+        if (avatar) {\r\n+            // Limpiar clases previas\r\n+            avatar.className = 'character-avatar';\r\n+            \r\n+            // Añadir clases según selecciones\r\n+            if (this.selectedGender) {\r\n+                avatar.classList.add(this.selectedGender);\r\n+            }\r\n+            \r\n+            if (this.selectedSpecialization) {\r\n+                avatar.classList.add(this.selectedSpecialization);\r\n+            }\r\n+            \r\n+            // Actualizar silueta con SVG adecuado\r\n+            const silhouette = avatar.querySelector('.silhouette');\r\n+            if (silhouette) {\r\n+                let svgContent = '';\r\n+                \r\n+                if (this.selectedGender === 'male') {\r\n+                    svgContent = this.getMaleSilhouette(this.selectedSpecialization);\r\n+                } else if (this.selectedGender === 'female') {\r\n+                    svgContent = this.getFemaleSilhouette(this.selectedSpecialization);\r\n+                } else {\r\n+                    svgContent = '<svg viewBox=\"0 0 100 100\"><circle cx=\"50\" cy=\"30\" r=\"20\" fill=\"#444\"/><rect x=\"40\" y=\"50\" width=\"20\" height=\"40\" fill=\"#444\"/></svg>';\r\n+                }\r\n+                \r\n+                silhouette.innerHTML = svgContent;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    // Siluetas según género y especialización\r\n+    getMaleSilhouette(spec) {\r\n+        const baseColor = spec === 'red' ? '#ff3a4a' : spec === 'blue' ? '#1fa7ff' : '#a742ff';\r\n+        \r\n+        return `<svg viewBox=\"0 0 100 120\">\r\n+            <defs>\r\n+                <linearGradient id=\"cyberbg\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\r\n+                    <stop offset=\"0%\" stop-color=\"${baseColor}\" stop-opacity=\"0.3\" />\r\n+                    <stop offset=\"100%\" stop-color=\"${baseColor}\" stop-opacity=\"0.1\" />\r\n+                </linearGradient>\r\n+            </defs>\r\n+            <rect x=\"0\" y=\"0\" width=\"100\" height=\"120\" fill=\"url(#cyberbg)\" />\r\n+            <circle cx=\"50\" cy=\"25\" r=\"15\" fill=\"none\" stroke=\"${baseColor}\" stroke-width=\"2\" />\r\n+            <path d=\"M35,40 L65,40 L65,80 L55,80 L55,100 L45,100 L45,80 L35,80 Z\" fill=\"none\" stroke=\"${baseColor}\" stroke-width=\"2\" />\r\n+            <path d=\"M35,50 L25,70 M65,50 L75,70\" fill=\"none\" stroke=\"${baseColor}\" stroke-width=\"2\" />\r\n+            <path d=\"M45,40 L40,25 M55,40 L60,25\" fill=\"none\" stroke=\"${baseColor}\" stroke-width=\"1\" />\r\n+            <circle cx=\"43\" cy=\"22\" r=\"2\" fill=\"${baseColor}\" />\r\n+            <circle cx=\"57\" cy=\"22\" r=\"2\" fill=\"${baseColor}\" />\r\n+            <path d=\"M45,30 L55,30\" stroke=\"${baseColor}\" stroke-width=\"1\" />\r\n+        </svg>`;\r\n+    }\r\n+\r\n+    getFemaleSilhouette(spec) {\r\n+        const baseColor = spec === 'red' ? '#ff3a4a' : spec === 'blue' ? '#1fa7ff' : '#a742ff';\r\n+        \r\n+        return `<svg viewBox=\"0 0 100 120\">\r\n+            <defs>\r\n+                <linearGradient id=\"cyberbg\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\r\n+                    <stop offset=\"0%\" stop-color=\"${baseColor}\" stop-opacity=\"0.3\" />\r\n+                    <stop offset=\"100%\" stop-color=\"${baseColor}\" stop-opacity=\"0.1\" />\r\n+                </linearGradient>\r\n+            </defs>\r\n+            <rect x=\"0\" y=\"0\" width=\"100\" height=\"120\" fill=\"url(#cyberbg)\" />\r\n+            <circle cx=\"50\" cy=\"25\" r=\"15\" fill=\"none\" stroke=\"${baseColor}\" stroke-width=\"2\" />\r\n+            <path d=\"M35,40 L40,80 L45,80 L45,100 L55,100 L55,80 L60,80 L65,40 Z\" fill=\"none\" stroke=\"${baseColor}\" stroke-width=\"2\" />\r\n+            <path d=\"M35,50 L25,65 M65,50 L75,65\" fill=\"none\" stroke=\"${baseColor}\" stroke-width=\"2\" />\r\n+            <path d=\"M45,40 L40,25 M55,40 L60,25\" fill=\"none\" stroke=\"${baseColor}\" stroke-width=\"1\" />\r\n+            <circle cx=\"43\" cy=\"22\" r=\"2\" fill=\"${baseColor}\" />\r\n+            <circle cx=\"57\" cy=\"22\" r=\"2\" fill=\"${baseColor}\" />\r\n+            <path d=\"M45,30 L55,30\" stroke=\"${baseColor}\" stroke-width=\"1\" />\r\n+        </svg>`;\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1741028696074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,13 +90,16 @@\n         this.elements.titleContainer.appendChild(title);\r\n         this.elements.titleContainer.appendChild(subtitle);\r\n         this.container.appendChild(this.elements.titleContainer);\r\n         \r\n-        // Contenedor para todas las pantallas del menú\r\n+        // Contenedor para todas las pantallas del menú - Ajustar posición\r\n         this.elements.screenContainer = document.createElement('div');\r\n         this.elements.screenContainer.className = 'screen-container';\r\n         this.container.appendChild(this.elements.screenContainer);\r\n         \r\n+        // Posicionar el título más arriba para dejar más espacio al menú\r\n+        this.elements.titleContainer.style.top = '5%'; // Cambiado desde 10%\r\n+        \r\n         // Crear cada pantalla\r\n         this.createMainScreen();\r\n         this.createNewGameScreen();\r\n         this.createLoadGameScreen();\r\n@@ -246,11 +249,8 @@\n         // Selección de especialización mejorada\r\n         const specContainer = document.createElement('div');\r\n         specContainer.className = 'specialization-container';\r\n         \r\n-        const specTitle = document.createElement('h4');\r\n-        specTitle.textContent = 'Especialización';\r\n-        specContainer.appendChild(specTitle);\r\n         \r\n         // Tarjetas de especialización mejoradas\r\n         const specCards = document.createElement('div');\r\n         specCards.className = 'spec-cards';\r\n"
                },
                {
                    "date": 1741028713524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,8 +249,11 @@\n         // Selección de especialización mejorada\r\n         const specContainer = document.createElement('div');\r\n         specContainer.className = 'specialization-container';\r\n         \r\n+        const specTitle = document.createElement('h4');\r\n+        specTitle.textContent = 'Especialización';\r\n+        specContainer.appendChild(specTitle);\r\n         \r\n         // Tarjetas de especialización mejoradas\r\n         const specCards = document.createElement('div');\r\n         specCards.className = 'spec-cards';\r\n@@ -368,11 +371,8 @@\n         \r\n         specContainer.appendChild(specCards);\r\n         newGameScreen.appendChild(specContainer);\r\n         \r\n-        // Vista previa del personaje (nuevo)\r\n-        const previewContainer = document.createElement('div');\r\n-        previewContainer.className = 'character-preview-container';\r\n         \r\n         const previewTitle = document.createElement('h4');\r\n         previewTitle.textContent = 'Vista previa';\r\n         previewContainer.appendChild(previewTitle);\r\n"
                },
                {
                    "date": 1741028721151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -444,10 +444,10 @@\n         const loadGameScreen = document.createElement('div');\r\n         loadGameScreen.className = 'menu-screen';\r\n         loadGameScreen.id = 'load-game-screen';\r\n         \r\n-        loadGameScreen.appendChild(screenTitle);\r\n-        \r\n+        // Título de la pantalla\r\n+        const screenTitle = document.createElement('h3');\r\n         // Contenedor de slots de guardado\r\n         const slotsContainer = document.createElement('div');\r\n         slotsContainer.className = 'save-slots-container';\r\n         \r\n"
                },
                {
                    "date": 1741028772622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -679,9 +679,9 @@\n         container.className = 'option-item toggle-option';\r\n         \r\n         const labelEl = document.createElement('label');\r\n         labelEl.htmlFor = id;\r\n-        toggleWrapper.className = 'toggle-wrapper';\r\n+        labelEl.textContent = label;\r\n         \r\n         const checkbox = document.createElement('input');\r\n         checkbox.type = 'checkbox';\r\n         checkbox.id = id;\r\n"
                }
            ],
            "date": 1741025792728,
            "name": "Commit-0",
            "content": "import { Player } from '../entities/Player.js';\r\n\r\nexport class MainMenu {\r\n    constructor(containerId) {\r\n        this.container = document.getElementById(containerId);\r\n        this.audioManager = null; // Placeholder para sistema de audio\r\n        this.currentScreen = 'main';\r\n        this.theme = Player.getMainMenuTheme();\r\n        this.saveSlots = Player.getSaveSlotInfo();\r\n        this.selectedSpecialization = 'neutral';\r\n        this.playerNameInput = '';\r\n        \r\n        // Referencias a elementos DOM\r\n        this.elements = {};\r\n        \r\n        // Inicializar opciones\r\n        this.gameOptions = {\r\n            musicVolume: 0.7,\r\n            sfxVolume: 0.8,\r\n            fullscreen: false,\r\n            difficulty: 'normal',\r\n            language: 'es'\r\n        };\r\n        \r\n        // Cargar opciones guardadas si existen\r\n        this.loadSavedOptions();\r\n        \r\n        // Inicializar menú\r\n        this.initialize();\r\n    }\r\n    \r\n    loadSavedOptions() {\r\n        // Intenta cargar opciones desde localStorage\r\n        const savedOptions = localStorage.getItem('cybervania_options');\r\n        if (savedOptions) {\r\n            try {\r\n                this.gameOptions = JSON.parse(savedOptions);\r\n            } catch (e) {\r\n                console.error('Error al cargar opciones guardadas:', e);\r\n            }\r\n        }\r\n    }\r\n    \r\n    saveOptions() {\r\n        // Guarda opciones en localStorage\r\n        localStorage.setItem('cybervania_options', JSON.stringify(this.gameOptions));\r\n    }\r\n    \r\n    initialize() {\r\n        // Crear estructura del menú\r\n        this.createMenuStructure();\r\n        \r\n        // Aplicar tema visual\r\n        this.applyTheme();\r\n        \r\n        // Mostrar pantalla inicial\r\n        this.showScreen('main');\r\n        \r\n        // Iniciar animación de fondo\r\n        this.startBackgroundEffects();\r\n        \r\n        // Reproducir música de fondo\r\n        this.playBackgroundMusic();\r\n    }\r\n    \r\n    createMenuStructure() {\r\n        // Limpiar contenedor\r\n        this.container.innerHTML = '';\r\n        \r\n        // Crear capas de fondo\r\n        this.elements.backgroundLayer = document.createElement('div');\r\n        this.elements.backgroundLayer.className = 'menu-background';\r\n        this.container.appendChild(this.elements.backgroundLayer);\r\n        \r\n        // Capa de niebla\r\n        this.elements.mistLayer = document.createElement('div');\r\n        this.elements.mistLayer.className = 'mist-layer';\r\n        this.container.appendChild(this.elements.mistLayer);\r\n        \r\n        // Contenedor de título\r\n        this.elements.titleContainer = document.createElement('div');\r\n        this.elements.titleContainer.className = 'title-container';\r\n        \r\n        const title = document.createElement('h1');\r\n        title.textContent = this.theme.title;\r\n        \r\n        const subtitle = document.createElement('h2');\r\n        subtitle.textContent = this.theme.subtitle;\r\n        \r\n        this.elements.titleContainer.appendChild(title);\r\n        this.elements.titleContainer.appendChild(subtitle);\r\n        this.container.appendChild(this.elements.titleContainer);\r\n        \r\n        // Contenedor para todas las pantallas del menú\r\n        this.elements.screenContainer = document.createElement('div');\r\n        this.elements.screenContainer.className = 'screen-container';\r\n        this.container.appendChild(this.elements.screenContainer);\r\n        \r\n        // Crear cada pantalla\r\n        this.createMainScreen();\r\n        this.createNewGameScreen();\r\n        this.createLoadGameScreen();\r\n        this.createOptionsScreen();\r\n    }\r\n    \r\n    createMainScreen() {\r\n        const mainScreen = document.createElement('div');\r\n        mainScreen.className = 'menu-screen';\r\n        mainScreen.id = 'main-screen';\r\n        \r\n        const menuList = document.createElement('ul');\r\n        menuList.className = 'menu-list';\r\n        \r\n        // Crear elementos del menú principal\r\n        this.theme.menuItems.forEach(item => {\r\n            const menuItem = document.createElement('li');\r\n            menuItem.className = 'menu-item';\r\n            menuItem.dataset.action = item.id;\r\n            \r\n            const icon = document.createElement('span');\r\n            icon.className = 'menu-icon ' + item.icon;\r\n            \r\n            const text = document.createElement('span');\r\n            text.className = 'menu-text';\r\n            text.textContent = item.text;\r\n            \r\n            menuItem.appendChild(icon);\r\n            menuItem.appendChild(text);\r\n            \r\n            // Añadir evento de clic\r\n            menuItem.addEventListener('click', () => this.handleMenuAction(item.id));\r\n            \r\n            // Añadir eventos para efectos de hover\r\n            menuItem.addEventListener('mouseenter', () => this.playHoverSound());\r\n            \r\n            menuList.appendChild(menuItem);\r\n        });\r\n        \r\n        mainScreen.appendChild(menuList);\r\n        this.elements.screenContainer.appendChild(mainScreen);\r\n        this.elements.mainScreen = mainScreen;\r\n    }\r\n    \r\n    createNewGameScreen() {\r\n        const newGameScreen = document.createElement('div');\r\n        newGameScreen.className = 'menu-screen';\r\n        newGameScreen.id = 'new-game-screen';\r\n        \r\n        // Título de la pantalla\r\n        const screenTitle = document.createElement('h3');\r\n        screenTitle.textContent = 'Nueva Partida';\r\n        newGameScreen.appendChild(screenTitle);\r\n        \r\n        // Campo para nombre del jugador\r\n        const nameField = document.createElement('div');\r\n        nameField.className = 'form-group';\r\n        \r\n        const nameLabel = document.createElement('label');\r\n        nameLabel.textContent = 'Nombre de Hacker:';\r\n        nameLabel.htmlFor = 'player-name';\r\n        \r\n        const nameInput = document.createElement('input');\r\n        nameInput.type = 'text';\r\n        nameInput.id = 'player-name';\r\n        nameInput.placeholder = 'Ingresa tu nombre...';\r\n        nameInput.maxLength = 15;\r\n        nameInput.addEventListener('input', (e) => {\r\n            this.playerNameInput = e.target.value;\r\n        });\r\n        \r\n        nameField.appendChild(nameLabel);\r\n        nameField.appendChild(nameInput);\r\n        newGameScreen.appendChild(nameField);\r\n        \r\n        // Selección de especialización\r\n        const specContainer = document.createElement('div');\r\n        specContainer.className = 'specialization-container';\r\n        \r\n        const specTitle = document.createElement('h4');\r\n        specTitle.textContent = 'Especialización';\r\n        specContainer.appendChild(specTitle);\r\n        \r\n        // Tarjetas de especialización\r\n        const specCards = document.createElement('div');\r\n        specCards.className = 'spec-cards';\r\n        \r\n        const specializations = [\r\n            { id: 'red', name: 'Ofensivo', desc: 'Enfocado en ataques poderosos' },\r\n            { id: 'blue', name: 'Defensivo', desc: 'Mayor resistencia y supervivencia' },\r\n            { id: 'purple', name: 'Equilibrado', desc: 'Versatilidad y adaptabilidad' }\r\n        ];\r\n        \r\n        specializations.forEach(spec => {\r\n            const card = document.createElement('div');\r\n            card.className = `spec-card ${spec.id}`;\r\n            card.dataset.spec = spec.id;\r\n            \r\n            const cardTitle = document.createElement('h5');\r\n            cardTitle.textContent = spec.name;\r\n            \r\n            const cardDesc = document.createElement('p');\r\n            cardDesc.textContent = spec.desc;\r\n            \r\n            card.appendChild(cardTitle);\r\n            card.appendChild(cardDesc);\r\n            \r\n            card.addEventListener('click', () => {\r\n                // Eliminar selección anterior\r\n                document.querySelectorAll('.spec-card').forEach(c => {\r\n                    c.classList.remove('selected');\r\n                });\r\n                \r\n                // Seleccionar nueva\r\n                card.classList.add('selected');\r\n                this.selectedSpecialization = spec.id;\r\n                this.playSelectSound();\r\n            });\r\n            \r\n            specCards.appendChild(card);\r\n        });\r\n        \r\n        specContainer.appendChild(specCards);\r\n        newGameScreen.appendChild(specContainer);\r\n        \r\n        // Botones de acción\r\n        const actionButtons = document.createElement('div');\r\n        actionButtons.className = 'action-buttons';\r\n        \r\n        const startButton = document.createElement('button');\r\n        startButton.className = 'main-button';\r\n        startButton.textContent = 'Comenzar Partida';\r\n        startButton.addEventListener('click', () => this.startNewGame());\r\n        \r\n        const backButton = document.createElement('button');\r\n        backButton.className = 'back-button';\r\n        backButton.textContent = 'Volver';\r\n        backButton.addEventListener('click', () => this.showScreen('main'));\r\n        \r\n        actionButtons.appendChild(startButton);\r\n        actionButtons.appendChild(backButton);\r\n        newGameScreen.appendChild(actionButtons);\r\n        \r\n        this.elements.screenContainer.appendChild(newGameScreen);\r\n        this.elements.newGameScreen = newGameScreen;\r\n    }\r\n    \r\n    createLoadGameScreen() {\r\n        const loadGameScreen = document.createElement('div');\r\n        loadGameScreen.className = 'menu-screen';\r\n        loadGameScreen.id = 'load-game-screen';\r\n        \r\n        // Título de la pantalla\r\n        const screenTitle = document.createElement('h3');\r\n        screenTitle.textContent = 'Cargar Partida';\r\n        loadGameScreen.appendChild(screenTitle);\r\n        \r\n        // Contenedor de slots de guardado\r\n        const slotsContainer = document.createElement('div');\r\n        slotsContainer.className = 'save-slots-container';\r\n        \r\n        // Crear 3 slots\r\n        for (let i = 0; i < 3; i++) {\r\n            const slot = document.createElement('div');\r\n            slot.className = 'save-slot';\r\n            slot.dataset.index = i;\r\n            \r\n            // Comprobar si el slot tiene datos\r\n            if (this.saveSlots[i] && !this.saveSlots[i].isEmpty) {\r\n                const slotInfo = this.saveSlots[i];\r\n                \r\n                const slotHeader = document.createElement('div');\r\n                slotHeader.className = 'slot-header';\r\n                \r\n                const slotTitle = document.createElement('h4');\r\n                slotTitle.textContent = slotInfo.playerName;\r\n                \r\n                const slotDate = document.createElement('span');\r\n                slotDate.className = 'slot-date';\r\n                slotDate.textContent = new Date(slotInfo.timestamp).toLocaleDateString();\r\n                \r\n                slotHeader.appendChild(slotTitle);\r\n                slotHeader.appendChild(slotDate);\r\n                \r\n                const slotDetails = document.createElement('div');\r\n                slotDetails.className = 'slot-details';\r\n                \r\n                const specBadge = document.createElement('span');\r\n                specBadge.className = `spec-badge ${slotInfo.specialization}`;\r\n                specBadge.textContent = this.getSpecializationName(slotInfo.specialization);\r\n                \r\n                const levelInfo = document.createElement('span');\r\n                levelInfo.className = 'level-info';\r\n                levelInfo.textContent = `Nivel: ${slotInfo.level}`;\r\n                \r\n                slotDetails.appendChild(specBadge);\r\n                slotDetails.appendChild(levelInfo);\r\n                \r\n                slot.appendChild(slotHeader);\r\n                slot.appendChild(slotDetails);\r\n                \r\n                // Agregar evento para cargar partida\r\n                slot.addEventListener('click', () => this.loadGame(i));\r\n            } else {\r\n                // Slot vacío\r\n                const emptyText = document.createElement('div');\r\n                emptyText.className = 'empty-slot-text';\r\n                emptyText.textContent = 'Slot vacío';\r\n                \r\n                slot.classList.add('empty');\r\n                slot.appendChild(emptyText);\r\n                \r\n                // Los slots vacíos no tienen acción\r\n            }\r\n            \r\n            slotsContainer.appendChild(slot);\r\n        }\r\n        \r\n        loadGameScreen.appendChild(slotsContainer);\r\n        \r\n        // Botón para volver\r\n        const backButton = document.createElement('button');\r\n        backButton.className = 'back-button';\r\n        backButton.textContent = 'Volver';\r\n        backButton.addEventListener('click', () => this.showScreen('main'));\r\n        \r\n        loadGameScreen.appendChild(backButton);\r\n        \r\n        this.elements.screenContainer.appendChild(loadGameScreen);\r\n        this.elements.loadGameScreen = loadGameScreen;\r\n    }\r\n    \r\n    createOptionsScreen() {\r\n        const optionsScreen = document.createElement('div');\r\n        optionsScreen.className = 'menu-screen';\r\n        optionsScreen.id = 'options-screen';\r\n        \r\n        // Título de la pantalla\r\n        const screenTitle = document.createElement('h3');\r\n        screenTitle.textContent = 'Opciones';\r\n        optionsScreen.appendChild(screenTitle);\r\n        \r\n        // Contenedor de opciones\r\n        const optionsContainer = document.createElement('div');\r\n        optionsContainer.className = 'options-container';\r\n        \r\n        // Opción: Volumen de música\r\n        const musicOption = this.createSliderOption(\r\n            'music-volume', \r\n            'Volumen de música', \r\n            this.gameOptions.musicVolume,\r\n            (value) => {\r\n                this.gameOptions.musicVolume = value;\r\n                // Aquí se implementaría el cambio en tiempo real del volumen\r\n            }\r\n        );\r\n        \r\n        // Opción: Volumen de efectos\r\n        const sfxOption = this.createSliderOption(\r\n            'sfx-volume', \r\n            'Volumen de efectos', \r\n            this.gameOptions.sfxVolume,\r\n            (value) => {\r\n                this.gameOptions.sfxVolume = value;\r\n                // Aquí se implementaría el cambio en tiempo real del volumen\r\n            }\r\n        );\r\n        \r\n        // Opción: Pantalla completa\r\n        const fullscreenOption = this.createToggleOption(\r\n            'fullscreen',\r\n            'Pantalla completa',\r\n            this.gameOptions.fullscreen,\r\n            (value) => {\r\n                this.gameOptions.fullscreen = value;\r\n                this.toggleFullscreen(value);\r\n            }\r\n        );\r\n        \r\n        // Opción: Dificultad\r\n        const difficultyOption = this.createSelectOption(\r\n            'difficulty',\r\n            'Dificultad',\r\n            [\r\n                { value: 'easy', label: 'Fácil' },\r\n                { value: 'normal', label: 'Normal' },\r\n                { value: 'hard', label: 'Difícil' }\r\n            ],\r\n            this.gameOptions.difficulty,\r\n            (value) => {\r\n                this.gameOptions.difficulty = value;\r\n            }\r\n        );\r\n        \r\n        // Opción: Idioma\r\n        const languageOption = this.createSelectOption(\r\n            'language',\r\n            'Idioma',\r\n            [\r\n                { value: 'es', label: 'Español' },\r\n                { value: 'en', label: 'English' },\r\n                { value: 'fr', label: 'Français' }\r\n            ],\r\n            this.gameOptions.language,\r\n            (value) => {\r\n                this.gameOptions.language = value;\r\n            }\r\n        );\r\n        \r\n        // Agregar todas las opciones\r\n        optionsContainer.appendChild(musicOption);\r\n        optionsContainer.appendChild(sfxOption);\r\n        optionsContainer.appendChild(fullscreenOption);\r\n        optionsContainer.appendChild(difficultyOption);\r\n        optionsContainer.appendChild(languageOption);\r\n        \r\n        optionsScreen.appendChild(optionsContainer);\r\n        \r\n        // Botones de acción\r\n        const actionButtons = document.createElement('div');\r\n        actionButtons.className = 'action-buttons';\r\n        \r\n        const saveButton = document.createElement('button');\r\n        saveButton.className = 'main-button';\r\n        saveButton.textContent = 'Guardar Cambios';\r\n        saveButton.addEventListener('click', () => {\r\n            this.saveOptions();\r\n            this.showScreen('main');\r\n        });\r\n        \r\n        const cancelButton = document.createElement('button');\r\n        cancelButton.className = 'back-button';\r\n        cancelButton.textContent = 'Cancelar';\r\n        cancelButton.addEventListener('click', () => {\r\n            // Restablecer opciones cargadas\r\n            this.loadSavedOptions();\r\n            this.showScreen('main');\r\n        });\r\n        \r\n        actionButtons.appendChild(saveButton);\r\n        actionButtons.appendChild(cancelButton);\r\n        optionsScreen.appendChild(actionButtons);\r\n        \r\n        this.elements.screenContainer.appendChild(optionsScreen);\r\n        this.elements.optionsScreen = optionsScreen;\r\n    }\r\n    \r\n    // Métodos de ayuda para crear opciones\r\n    createSliderOption(id, label, value, onChange) {\r\n        const container = document.createElement('div');\r\n        container.className = 'option-item slider-option';\r\n        \r\n        const labelEl = document.createElement('label');\r\n        labelEl.htmlFor = id;\r\n        labelEl.textContent = label;\r\n        \r\n        const valueDisplay = document.createElement('span');\r\n        valueDisplay.className = 'option-value';\r\n        valueDisplay.textContent = Math.round(value * 100) + '%';\r\n        \r\n        const slider = document.createElement('input');\r\n        slider.type = 'range';\r\n        slider.id = id;\r\n        slider.min = '0';\r\n        slider.max = '1';\r\n        slider.step = '0.01';\r\n        slider.value = value;\r\n        \r\n        slider.addEventListener('input', (e) => {\r\n            const newValue = parseFloat(e.target.value);\r\n            valueDisplay.textContent = Math.round(newValue * 100) + '%';\r\n            onChange(newValue);\r\n        });\r\n        \r\n        container.appendChild(labelEl);\r\n        container.appendChild(slider);\r\n        container.appendChild(valueDisplay);\r\n        \r\n        return container;\r\n    }\r\n    \r\n    createToggleOption(id, label, isChecked, onChange) {\r\n        const container = document.createElement('div');\r\n        container.className = 'option-item toggle-option';\r\n        \r\n        const labelEl = document.createElement('label');\r\n        labelEl.htmlFor = id;\r\n        labelEl.textContent = label;\r\n        \r\n        const toggleWrapper = document.createElement('div');\r\n        toggleWrapper.className = 'toggle-wrapper';\r\n        \r\n        const checkbox = document.createElement('input');\r\n        checkbox.type = 'checkbox';\r\n        checkbox.id = id;\r\n        checkbox.checked = isChecked;\r\n        \r\n        const toggleDisplay = document.createElement('div');\r\n        toggleDisplay.className = 'toggle-display';\r\n        \r\n        checkbox.addEventListener('change', (e) => {\r\n            onChange(e.target.checked);\r\n        });\r\n        \r\n        toggleWrapper.appendChild(checkbox);\r\n        toggleWrapper.appendChild(toggleDisplay);\r\n        \r\n        container.appendChild(labelEl);\r\n        container.appendChild(toggleWrapper);\r\n        \r\n        return container;\r\n    }\r\n    \r\n    createSelectOption(id, label, options, currentValue, onChange) {\r\n        const container = document.createElement('div');\r\n        container.className = 'option-item select-option';\r\n        \r\n        const labelEl = document.createElement('label');\r\n        labelEl.htmlFor = id;\r\n        labelEl.textContent = label;\r\n        \r\n        const select = document.createElement('select');\r\n        select.id = id;\r\n        \r\n        options.forEach(option => {\r\n            const optionEl = document.createElement('option');\r\n            optionEl.value = option.value;\r\n            optionEl.textContent = option.label;\r\n            if (option.value === currentValue) {\r\n                optionEl.selected = true;\r\n            }\r\n            select.appendChild(optionEl);\r\n        });\r\n        \r\n        select.addEventListener('change', (e) => {\r\n            onChange(e.target.value);\r\n        });\r\n        \r\n        container.appendChild(labelEl);\r\n        container.appendChild(select);\r\n        \r\n        return container;\r\n    }\r\n    \r\n    // Métodos de control del menú\r\n    handleMenuAction(action) {\r\n        this.playSelectSound();\r\n        \r\n        switch (action) {\r\n            case 'new-game':\r\n                this.showScreen('new-game');\r\n                break;\r\n                \r\n            case 'load-game':\r\n                this.refreshSaveSlots();\r\n                this.showScreen('load-game');\r\n                break;\r\n                \r\n            case 'options':\r\n                this.showScreen('options');\r\n                break;\r\n                \r\n            case 'exit':\r\n                this.exitGame();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    showScreen(screenId) {\r\n        // Ocultar todas las pantallas\r\n        document.querySelectorAll('.menu-screen').forEach(screen => {\r\n            screen.classList.remove('active');\r\n        });\r\n        \r\n        // Mostrar la pantalla solicitada\r\n        const screenElement = document.getElementById(`${screenId}-screen`);\r\n        if (screenElement) {\r\n            screenElement.classList.add('active');\r\n            \r\n            // Efecto de entrada según el tema\r\n            screenElement.style.animation = 'none';\r\n            setTimeout(() => {\r\n                screenElement.style.animation = `${this.theme.animations.menuEntrance} 0.5s forwards`;\r\n            }, 10);\r\n            \r\n            this.currentScreen = screenId;\r\n        }\r\n    }\r\n    \r\n    startNewGame() {\r\n        if (!this.playerNameInput || this.playerNameInput.trim() === '') {\r\n            this.showNotification('Debes ingresar un nombre');\r\n            return;\r\n        }\r\n        \r\n        if (this.selectedSpecialization === 'neutral') {\r\n            this.showNotification('Selecciona una especialización');\r\n            return;\r\n        }\r\n        \r\n        // Crear jugador y comenzar partida\r\n        const player = Player.startNewGame(\r\n            this.playerNameInput.trim(),\r\n            this.selectedSpecialization\r\n        );\r\n        \r\n        // Aquí iría la lógica para iniciar el juego con el player creado\r\n        console.log('¡Iniciando nueva partida!', player);\r\n        \r\n        // Por ahora, simularemos el inicio guardando en localStorage\r\n        localStorage.setItem('current_player', JSON.stringify(player.serialize()));\r\n        \r\n        // Redirigir a página de juego\r\n        window.location.href = 'game.html'; \r\n    }\r\n    \r\n    loadGame(slotIndex) {\r\n        const slotInfo = this.saveSlots[slotIndex];\r\n        if (slotInfo && !slotInfo.isEmpty) {\r\n            const player = Player.loadGame(slotIndex);\r\n            \r\n            if (player) {\r\n                console.log('Cargando partida desde slot', slotIndex);\r\n                localStorage.setItem('current_player', JSON.stringify(player.serialize()));\r\n                \r\n                // Redirigir a página de juego\r\n                window.location.href = 'game.html';\r\n            } else {\r\n                this.showNotification('Error al cargar la partida');\r\n            }\r\n        }\r\n    }\r\n    \r\n    refreshSaveSlots() {\r\n        // Actualizar datos de partidas guardadas\r\n        this.saveSlots = Player.getSaveSlotInfo();\r\n        \r\n        // Actualizar visualización de slots\r\n        // (implementación básica - la real actualizaría el DOM)\r\n    }\r\n    \r\n    exitGame() {\r\n        // En un juego web, podríamos cerrar la ventana o redirigir\r\n        if (confirm('¿Seguro que quieres salir?')) {\r\n            window.close();\r\n            // Alternativa para navegadores que no permiten cerrar:\r\n            // window.location.href = 'https://github.com/';\r\n        }\r\n    }\r\n    \r\n    // Métodos para efectos visuales y de audio\r\n    applyTheme() {\r\n        document.documentElement.style.setProperty('--menu-frame-color', this.theme.uiElements.menuFrameColor);\r\n        document.documentElement.style.setProperty('--text-glow-color', this.theme.uiElements.textGlowColor);\r\n        document.documentElement.style.setProperty('--mist-opacity', this.theme.uiElements.mistOpacity);\r\n        document.documentElement.style.setProperty('--background-blur', this.theme.uiElements.backgroundBlur);\r\n        \r\n        // Aplicar fuente\r\n        document.body.style.fontFamily = this.theme.uiElements.font;\r\n        \r\n        // Aplicar cursor personalizado\r\n        if (this.theme.uiElements.cursor) {\r\n            document.body.style.cursor = `url('assets/cursors/${this.theme.uiElements.cursor}.png'), auto`;\r\n        }\r\n    }\r\n    \r\n    startBackgroundEffects() {\r\n        // Animación de niebla\r\n        const mistLayer = this.elements.mistLayer;\r\n        if (mistLayer) {\r\n            // Crear elementos de niebla que se mueven lentamente\r\n            for (let i = 0; i < 5; i++) {\r\n                const mistElement = document.createElement('div');\r\n                mistElement.className = 'mist-element';\r\n                mistElement.style.opacity = (Math.random() * 0.3 + 0.1).toString();\r\n                mistElement.style.left = (Math.random() * 100) + '%';\r\n                mistElement.style.top = (Math.random() * 100) + '%';\r\n                mistElement.style.animationDuration = (Math.random() * 15 + 15) + 's';\r\n                mistElement.style.animationDelay = (Math.random() * 5) + 's';\r\n                mistLayer.appendChild(mistElement);\r\n            }\r\n        }\r\n        \r\n        // Animación de partículas digitales (efecto Matrix)\r\n        const backgroundLayer = this.elements.backgroundLayer;\r\n        if (backgroundLayer) {\r\n            // Creamos varias líneas de código cayendo\r\n            for (let i = 0; i < 15; i++) {\r\n                const codeStream = document.createElement('div');\r\n                codeStream.className = 'code-stream';\r\n                codeStream.style.left = (Math.random() * 100) + '%';\r\n                codeStream.style.animationDuration = (Math.random() * 10 + 10) + 's';\r\n                codeStream.style.animationDelay = (Math.random() * 5) + 's';\r\n                \r\n                // Generar caracteres para la columna de código\r\n                let codeChars = '';\r\n                const charCount = Math.floor(Math.random() * 15) + 10;\r\n                for (let j = 0; j < charCount; j++) {\r\n                    codeChars += this.getRandomHexChar();\r\n                }\r\n                \r\n                codeStream.textContent = codeChars;\r\n                backgroundLayer.appendChild(codeStream);\r\n            }\r\n        }\r\n    }\r\n    \r\n    getRandomHexChar() {\r\n        const chars = '0123456789ABCDEF∅⌀⏏⭘⸮⌧Ø£¥×÷';\r\n        return chars.charAt(Math.floor(Math.random() * chars.length));\r\n    }\r\n    \r\n    playBackgroundMusic() {\r\n        // Implementación básica, en una implementación real usaríamos un sistema de audio\r\n        console.log('Reproduciendo música de fondo:', this.theme.audio.backgroundTrack);\r\n    }\r\n    \r\n    playHoverSound() {\r\n        // Implementación básica\r\n        console.log('Reproduciendo sonido hover:', this.theme.audio.hoverSound);\r\n    }\r\n    \r\n    playSelectSound() {\r\n        // Implementación básica\r\n        console.log('Reproduciendo sonido select:', this.theme.audio.selectSound);\r\n    }\r\n    \r\n    toggleFullscreen(enable) {\r\n        if (enable) {\r\n            if (document.documentElement.requestFullscreen) {\r\n                document.documentElement.requestFullscreen();\r\n            }\r\n        } else {\r\n            if (document.exitFullscreen) {\r\n                document.exitFullscreen();\r\n            }\r\n        }\r\n    }\r\n    \r\n    showNotification(message) {\r\n        // Implementación básica de notificación\r\n        const notification = document.createElement('div');\r\n        notification.className = 'notification';\r\n        notification.textContent = message;\r\n        \r\n        this.container.appendChild(notification);\r\n        \r\n        // Animar entrada\r\n        setTimeout(() => {\r\n            notification.classList.add('show');\r\n        }, 10);\r\n        \r\n        // Eliminar después de un tiempo\r\n        setTimeout(() => {\r\n            notification.classList.remove('show');\r\n            setTimeout(() => {\r\n                notification.remove();\r\n            }, 500);\r\n        }, 3000);\r\n    }\r\n    \r\n    getSpecializationName(specId) {\r\n        switch(specId) {\r\n            case 'red': return 'Ofensivo';\r\n            case 'blue': return 'Defensivo';\r\n            case 'purple': return 'Equilibrado';\r\n            default: return 'Desconocido';\r\n        }\r\n    }\r\n}\r\n"
        }
    ]
}