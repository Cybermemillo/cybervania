{
    "sourceFile": "js/ui/OptionUpdater.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741029778475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741029778475,
            "name": "Commit-0",
            "content": "import { getGameConfiguration } from '../config/GameConfiguration.js';\r\nimport { getAudioManager } from '../audio/AudioManager.js';\r\n\r\n/**\r\n * Clase para gestionar la actualización de opciones en tiempo real\r\n */\r\nexport class OptionUpdater {\r\n    constructor() {\r\n        this.config = getGameConfiguration();\r\n        this.audioManager = getAudioManager();\r\n        this.effectsManager = null;\r\n        \r\n        // Referencias a elementos UI\r\n        this.elements = {\r\n            audioControls: {},\r\n            displayControls: {},\r\n            accessibilityControls: {},\r\n            gameplayControls: {}\r\n        };\r\n        \r\n        // Cambios pendientes\r\n        this.pendingChanges = {};\r\n    }\r\n    \r\n    /**\r\n     * Inicializa controladores para opciones de audio\r\n     */\r\n    setupAudioControls(elements) {\r\n        this.elements.audioControls = elements;\r\n        \r\n        // Volumen maestro\r\n        if (elements.masterVolume) {\r\n            elements.masterVolume.value = this.config.get('audio.masterVolume');\r\n            elements.masterVolume.addEventListener('input', (e) => {\r\n                const value = parseFloat(e.target.value);\r\n                this.audioManager.setMasterVolume(value);\r\n                this.pendingChanges['audio.masterVolume'] = value;\r\n            });\r\n        }\r\n        \r\n        // Volumen de música\r\n        if (elements.musicVolume) {\r\n            elements.musicVolume.value = this.config.get('audio.musicVolume');\r\n            elements.musicVolume.addEventListener('input', (e) => {\r\n                const value = parseFloat(e.target.value);\r\n                this.audioManager.setMusicVolume(value);\r\n                this.pendingChanges['audio.musicVolume'] = value;\r\n            });\r\n        }\r\n        \r\n        // Volumen de efectos\r\n        if (elements.sfxVolume) {\r\n            elements.sfxVolume.value = this.config.get('audio.sfxVolume');\r\n            elements.sfxVolume.addEventListener('input', (e) => {\r\n                const value = parseFloat(e.target.value);\r\n                this.audioManager.setSFXVolume(value);\r\n                this.pendingChanges['audio.sfxVolume'] = value;\r\n                \r\n                // Reproducir efecto para demostración\r\n                this.audioManager.playSound('menu_hover');\r\n            });\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Inicializa controladores para opciones de visuales\r\n     */\r\n    setupDisplayControls(elements, effectsManager) {\r\n        this.elements.displayControls = elements;\r\n        this.effectsManager = effectsManager;\r\n        \r\n        // Calidad visual\r\n        if (elements.visualQuality) {\r\n            elements.visualQuality.value = this.config.get('display.visualQuality');\r\n            elements.visualQuality.addEventListener('change', (e) => {\r\n                const value = e.target.value;\r\n                this.pendingChanges['display.visualQuality'] = value;\r\n                \r\n                if (this.effectsManager) {\r\n                    this.effectsManager.updateMistEffects(value);\r\n                    const effectIntensity = \r\n                        value === 'low' ? 0.3 : \r\n                        value === 'medium' ? "
        }
    ]
}