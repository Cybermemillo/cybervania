{
    "sourceFile": "js/ui/GothicEffects.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1741027450442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741027524074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,5 +252,103 @@\n             const line1 = arcaneLines[Math.floor(Math.random() * arcaneLines.length)];\r\n             const line2 = arcaneLines[Math.floor(Math.random() * arcaneLines.length)];\r\n             \r\n             // Crear SVG\r\n-            symbols += `\n\\ No newline at end of file\n+            symbols += `\r\n+                <svg viewBox=\"0 0 20 20\" width=\"${size}\" height=\"${size}\" \r\n+                     style=\"position: absolute; left: ${x}%; top: ${y}%; opacity: ${opacity};\">\r\n+                    <path d=\"${shape}\" fill=\"none\" stroke=\"#bf9b30\" stroke-width=\"0.5\"/>\r\n+                    <path d=\"${line1}\" stroke=\"#ff2288\" stroke-width=\"0.3\"/>\r\n+                    <path d=\"${line2}\" stroke=\"#ff2288\" stroke-width=\"0.3\"/>\r\n+                </svg>\r\n+            `;\r\n+        }\r\n+        \r\n+        return symbols;\r\n+    }\r\n+    \r\n+    startAmbientLightning() {\r\n+        // Efecto de relámpagos ambientales ocasionales\r\n+        const flashLightning = () => {\r\n+            // Probabilidad baja de relámpago\r\n+            if (Math.random() < 0.1) {\r\n+                const lightning = document.createElement('div');\r\n+                lightning.className = 'ambient-lightning';\r\n+                this.container.appendChild(lightning);\r\n+                \r\n+                // Activar el destello\r\n+                setTimeout(() => {\r\n+                    lightning.classList.add('flash');\r\n+                    \r\n+                    // Sonido sutil de trueno (implementado como console.log)\r\n+                    console.log('Thunder sound: distant rumble');\r\n+                    \r\n+                    // Eliminar después de animación\r\n+                    setTimeout(() => {\r\n+                        lightning.remove();\r\n+                    }, 1500);\r\n+                }, 100);\r\n+            }\r\n+            \r\n+            // Programar próximo relámpago\r\n+            const nextTime = Math.random() * 20000 + 10000; // 10-30 segundos\r\n+            setTimeout(flashLightning, nextTime);\r\n+        };\r\n+        \r\n+        // Iniciar ciclo\r\n+        const initialDelay = Math.random() * 10000 + 5000;\r\n+        setTimeout(flashLightning, initialDelay);\r\n+    }\r\n+    \r\n+    // Método para aplicar efectos adicionales a textos específicos\r\n+    applyBloodyText(selector) {\r\n+        const elements = document.querySelectorAll(selector);\r\n+        elements.forEach(element => {\r\n+            element.classList.add('bloody-text');\r\n+            \r\n+            // Añadir gotas de sangre digitales\r\n+            const dropCount = Math.floor(Math.random() * 3) + 1;\r\n+            for (let i = 0; i < dropCount; i++) {\r\n+                const drop = document.createElement('span');\r\n+                drop.className = 'blood-drop';\r\n+                drop.style.left = `${Math.random() * 80 + 10}%`;\r\n+                drop.style.animationDelay = `${Math.random() * 2}s`;\r\n+                element.appendChild(drop);\r\n+            }\r\n+        });\r\n+    }\r\n+    \r\n+    // Aplicar efecto de distorsión VHS a elementos\r\n+    applyVHSDistortion(selector) {\r\n+        const elements = document.querySelectorAll(selector);\r\n+        elements.forEach(element => {\r\n+            element.classList.add('vhs-distortion');\r\n+            \r\n+            // Crear capas de distorsión\r\n+            const noiseLayer = document.createElement('div');\r\n+            noiseLayer.className = 'vhs-noise';\r\n+            \r\n+            const scanlineLayer = document.createElement('div');\r\n+            scanlineLayer.className = 'vhs-scanlines';\r\n+            \r\n+            const glitchLayer = document.createElement('div');\r\n+            glitchLayer.className = 'vhs-glitch';\r\n+            \r\n+            // Insertar al principio del elemento para no afectar los eventos\r\n+            element.insertBefore(glitchLayer, element.firstChild);\r\n+            element.insertBefore(scanlineLayer, element.firstChild);\r\n+            element.insertBefore(noiseLayer, element.firstChild);\r\n+        });\r\n+    }\r\n+    \r\n+    // Añadir viñeta oscura con animación pulsante\r\n+    addDarkVignette() {\r\n+        const vignette = document.createElement('div');\r\n+        vignette.className = 'dark-vignette';\r\n+        this.container.appendChild(vignette);\r\n+        \r\n+        // Animación pulsante sutil\r\n+        setInterval(() => {\r\n+            vignette.classList.toggle('pulse');\r\n+        }, 5000);\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741029673676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,354 +1,264 @@\n /**\r\n- * Efectos visuales especialmente diseñados para reforzar la estética gótico-cyberpunk\r\n- * de Cybervania, dándole un carácter único y reconocible\r\n+ * Clase para gestionar efectos visuales góticos\r\n  */\r\n export class GothicEffects {\r\n     constructor(containerId) {\r\n         this.container = document.getElementById(containerId);\r\n-        this.elements = {};\r\n+        this.effectsEnabled = true;\r\n+        this.initialized = false;\r\n         this.initialize();\r\n     }\r\n     \r\n     initialize() {\r\n-        this.addGargoyles();\r\n-        this.createPentagram();\r\n-        this.addBloodSplatter();\r\n-        this.setupRitualGlowEffect();\r\n-        this.startAmbientLightning();\r\n+        if (this.initialized) return;\r\n         \r\n-        // Agregar clase especial al título\r\n-        const title = document.querySelector('.title-container h1');\r\n-        if (title) {\r\n-            title.classList.add('gothic-title');\r\n-            title.setAttribute('data-text', title.textContent);\r\n-        }\r\n+        // Crear elementos decorativos\r\n+        this.createGargoyles();\r\n+        \r\n+        this.initialized = true;\r\n     }\r\n     \r\n-    addGargoyles() {\r\n-        // Añadir gárgolas como vigilantes en las esquinas\r\n-        const gargoylePositions = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\r\n+    createGargoyles() {\r\n+        // Posiciones para las gárgolas\r\n+        const positions = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\r\n         \r\n-        gargoylePositions.forEach((position, index) => {\r\n+        positions.forEach(position => {\r\n             const gargoyle = document.createElement('div');\r\n             gargoyle.className = `gargoyle-ornament ${position}`;\r\n-            gargoyle.innerHTML = this.getGargoyleSVG(index);\r\n-            this.container.appendChild(gargoyle);\r\n+            gargoyle.innerHTML = this.getGargoyleSVG();\r\n             \r\n-            // Efectos interactivos en las gárgolas\r\n-            gargoyle.addEventListener('mouseenter', () => {\r\n+            gargoyle.addEventListener('mouseover', () => {\r\n                 gargoyle.classList.add('awakened');\r\n-                \r\n-                // Efecto de ojos brillantes\r\n-                const eyes = gargoyle.querySelectorAll('.gargoyle-eye');\r\n-                eyes.forEach(eye => {\r\n-                    eye.style.fill = '#ff2288';\r\n-                    eye.style.filter = 'drop-shadow(0 0 3px #ff2288)';\r\n-                });\r\n-                \r\n-                // Sonido sutil (implementado como console.log por ahora)\r\n-                console.log('Gargoyle awakened: subtle stone grinding sound');\r\n+                this.triggerRandomEvent();\r\n             });\r\n             \r\n-            gargoyle.addEventListener('mouseleave', () => {\r\n+            gargoyle.addEventListener('mouseout', () => {\r\n                 gargoyle.classList.remove('awakened');\r\n-                \r\n-                // Devolver ojos a estado normal\r\n-                const eyes = gargoyle.querySelectorAll('.gargoyle-eye');\r\n-                eyes.forEach(eye => {\r\n-                    eye.style.fill = '#8a0303';\r\n-                    eye.style.filter = '';\r\n-                });\r\n             });\r\n+            \r\n+            this.container.appendChild(gargoyle);\r\n         });\r\n     }\r\n     \r\n-    getGargoyleSVG(variant) {\r\n-        // Diseños simples de gárgolas con estilo gótico-tech\r\n-        const svgTemplates = [\r\n-            // Gárgola básica mirando hacia adelante\r\n-            `<svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\">\r\n-                <path class=\"gargoyle-body\" d=\"M25,10 Q35,5 40,15 T25,35 Q15,45 10,30 T25,10\" fill=\"#2d0245\" stroke=\"#bf9b30\" stroke-width=\"0.5\"/>\r\n-                <circle class=\"gargoyle-eye\" cx=\"20\" cy=\"18\" r=\"2\" fill=\"#8a0303\"/>\r\n-                <circle class=\"gargoyle-eye\" cx=\"30\" cy=\"18\" r=\"2\" fill=\"#8a0303\"/>\r\n-                <path class=\"gargoyle-circuit\" d=\"M15,25 h20 M25,15 v15\" stroke=\"#ff2288\" stroke-width=\"0.5\" opacity=\"0.6\"/>\r\n-            </svg>`,\r\n-            \r\n-            // Gárgola con alas digitales\r\n-            `<svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\">\r\n-                <path class=\"gargoyle-wing\" d=\"M10,15 Q15,5 25,10 L25,25 Z\" fill=\"#2d0245\" stroke=\"#bf9b30\" stroke-width=\"0.5\"/>\r\n-                <path class=\"gargoyle-wing\" d=\"M40,15 Q35,5 25,10 L25,25 Z\" fill=\"#2d0245\" stroke=\"#bf9b30\" stroke-width=\"0.5\"/>\r\n-                <path class=\"gargoyle-body\" d=\"M25,10 Q30,15 30,25 T25,35 Q20,40 20,25 T25,10\" fill=\"#2d0245\" stroke=\"#bf9b30\" stroke-width=\"0.5\"/>\r\n-                <circle class=\"gargoyle-eye\" cx=\"23\" cy=\"18\" r=\"2\" fill=\"#8a0303\"/>\r\n-                <circle class=\"gargoyle-eye\" cx=\"27\" cy=\"18\" r=\"2\" fill=\"#8a0303\"/>\r\n-                <path class=\"gargoyle-circuit\" d=\"M15,15 L35,15 M20,20 L30,20\" stroke=\"#ff2288\" stroke-width=\"0.5\" opacity=\"0.6\"/>\r\n-            </svg>`,\r\n-            \r\n-            // Gárgola guardián con cuernos\r\n-            `<svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\">\r\n-                <path class=\"gargoyle-horn\" d=\"M20,10 L15,2\" stroke=\"#bf9b30\" stroke-width=\"1\"/>\r\n-                <path class=\"gargoyle-horn\" d=\"M30,10 L35,2\" stroke=\"#bf9b30\" stroke-width=\"1\"/>\r\n-                <path class=\"gargoyle-body\" d=\"M20,10 Q25,5 30,10 L30,30 Q25,35 20,30 Z\" fill=\"#2d0245\" stroke=\"#bf9b30\" stroke-width=\"0.5\"/>\r\n-                <circle class=\"gargoyle-eye\" cx=\"22\" cy=\"15\" r=\"2\" fill=\"#8a0303\"/>\r\n-                <circle class=\"gargoyle-eye\" cx=\"28\" cy=\"15\" r=\"2\" fill=\"#8a0303\"/>\r\n-                <path class=\"gargoyle-circuit\" d=\"M20,20 L30,20 M20,25 L30,25\" stroke=\"#ff2288\" stroke-width=\"0.5\" opacity=\"0.6\"/>\r\n-            </svg>`,\r\n-            \r\n-            // Gárgola tech con elementos mecánicos\r\n-            `<svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\">\r\n-                <rect class=\"gargoyle-body\" x=\"15\" y=\"10\" width=\"20\" height=\"25\" rx=\"5\" fill=\"#2d0245\" stroke=\"#bf9b30\" stroke-width=\"0.5\"/>\r\n-                <circle class=\"gargoyle-eye\" cx=\"20\" cy=\"18\" r=\"2\" fill=\"#8a0303\"/>\r\n-                <circle class=\"gargoyle-eye\" cx=\"30\" cy=\"18\" r=\"2\" fill=\"#8a0303\"/>\r\n-                <line x1=\"15\" y1=\"25\" x2=\"35\" y2=\"25\" stroke=\"#bf9b30\" stroke-width=\"0.5\"/>\r\n-                <path class=\"gargoyle-circuit\" d=\"M20,25 v5 h10 v-5 M25,30 v5\" stroke=\"#ff2288\" stroke-width=\"0.5\" opacity=\"0.6\"/>\r\n-            </svg>`\r\n-        ];\r\n+    getGargoyleSVG() {\r\n+        return `<svg viewBox=\"0 0 100 100\" width=\"100%\" height=\"100%\">\r\n+            <path d=\"M50,20 Q60,10 70,15 T80,40 Q70,50 50,45 T20,40 Q30,30 50,20 Z\" \r\n+                fill=\"#2d0245\" stroke=\"#bf9b30\" stroke-width=\"1\"/>\r\n+            <circle cx=\"40\" cy=\"25\" r=\"3\" fill=\"#8a0303\"/>\r\n+            <circle cx=\"60\" cy=\"25\" r=\"3\" fill=\"#8a0303\"/>\r\n+            <path d=\"M45,35 Q50,40 55,35\" fill=\"none\" stroke=\"#bf9b30\" stroke-width=\"1\"/>\r\n+        </svg>`;\r\n+    }\r\n+    \r\n+    triggerRandomEvent() {\r\n+        // Provocar efectos aleatorios\r\n+        const randomEffect = Math.floor(Math.random() * 5);\r\n         \r\n-        return svgTemplates[variant % svgTemplates.length];\r\n+        switch (randomEffect) {\r\n+            case 0:\r\n+                this.pulseBackground();\r\n+                break;\r\n+            case 1:\r\n+                this.revealPentagram();\r\n+                break;\r\n+            case 2:\r\n+                this.triggerLightning();\r\n+                break;\r\n+            case 3:\r\n+                this.addBloodSplatter();\r\n+                break;\r\n+            case 4:\r\n+                this.flickerLights();\r\n+                break;\r\n+        }\r\n     }\r\n     \r\n-    createPentagram() {\r\n-        // Crear un pentagrama sutil que aparece cuando se carga el menú principal\r\n-        const pentagram = document.createElement('div');\r\n-        pentagram.className = 'cyber-pentagram';\r\n-        pentagram.innerHTML = `\r\n-            <svg viewBox=\"0 0 100 100\" width=\"200\" height=\"200\">\r\n-                <!-- Pentagrama base con estilo gótico-tech -->\r\n-                <path class=\"pentagram-outline\" d=\"M50,10 L61,40 L93,40 L68,60 L79,90 L50,75 L21,90 L32,60 L7,40 L39,40 Z\" \r\n-                      fill=\"none\" stroke=\"#bf9b30\" stroke-width=\"0.5\" opacity=\"0.3\"/>\r\n-                \r\n-                <!-- Círculo exterior -->\r\n-                <circle class=\"pentagram-circle\" cx=\"50\" cy=\"50\" r=\"45\" \r\n-                        fill=\"none\" stroke=\"#bf9b30\" stroke-width=\"0.3\" opacity=\"0.2\"/>\r\n-                \r\n-                <!-- Símbolos arcanos digitalizados -->\r\n-                <text x=\"48\" y=\"30\" font-family=\"serif\" fill=\"#bf9b30\" opacity=\"0.4\" font-size=\"5\">01010</text>\r\n-                <text x=\"73\" y=\"45\" font-family=\"serif\" fill=\"#bf9b30\" opacity=\"0.4\" font-size=\"5\">10110</text>\r\n-                <text x=\"65\" y=\"75\" font-family=\"serif\" fill=\"#bf9b30\" opacity=\"0.4\" font-size=\"5\">00101</text>\r\n-                <text x=\"35\" y=\"75\" font-family=\"serif\" fill=\"#bf9b30\" opacity=\"0.4\" font-size=\"5\">11001</text>\r\n-                <text x=\"26\" y=\"45\" font-family=\"serif\" fill=\"#bf9b30\" opacity=\"0.4\" font-size=\"5\">01100</text>\r\n-                \r\n-                <!-- Circuito interno -->\r\n-                <path class=\"pentagram-circuit\" d=\"M50,10 L50,90 M10,50 L90,50 M25,25 L75,75 M25,75 L75,25\" \r\n-                      stroke=\"#ff2288\" stroke-width=\"0.2\" opacity=\"0.15\"/>\r\n-            </svg>\r\n+    pulseBackground() {\r\n+        const overlay = document.createElement('div');\r\n+        overlay.className = 'pulse-overlay';\r\n+        overlay.style.cssText = `\r\n+            position: fixed;\r\n+            top: 0;\r\n+            left: 0;\r\n+            width: 100%;\r\n+            height: 100%;\r\n+            background: radial-gradient(ellipse at center, transparent 0%, rgba(50, 10, 40, 0.3) 100%);\r\n+            opacity: 0;\r\n+            transition: opacity 0.3s ease;\r\n+            pointer-events: none;\r\n+            z-index: 100;\r\n         `;\r\n         \r\n-        this.container.appendChild(pentagram);\r\n-        this.elements.pentagram = pentagram;\r\n+        document.body.appendChild(overlay);\r\n         \r\n-        // Animar entrada del pentagrama\r\n+        // Animar\r\n+        setTimeout(() => overlay.style.opacity = '1', 10);\r\n         setTimeout(() => {\r\n-            pentagram.classList.add('reveal');\r\n-        }, 1000);\r\n+            overlay.style.opacity = '0';\r\n+            setTimeout(() => overlay.remove(), 500);\r\n+        }, 800);\r\n     }\r\n     \r\n-    addBloodSplatter() {\r\n-        // Añadir pequeñas manchas de sangre digital en los márgenes\r\n-        const splatterCount = 5;\r\n+    revealPentagram() {\r\n+        // Verificar si ya existe\r\n+        let pentagram = document.querySelector('.cyber-pentagram');\r\n+        if (!pentagram) {\r\n+            pentagram = document.createElement('div');\r\n+            pentagram.className = 'cyber-pentagram';\r\n+            pentagram.innerHTML = this.getPentagramSVG();\r\n+            document.body.appendChild(pentagram);\r\n+        }\r\n         \r\n-        for (let i = 0; i < splatterCount; i++) {\r\n-            const splatter = document.createElement('div');\r\n-            splatter.className = 'blood-splatter';\r\n-            \r\n-            // Posicionar aleatoriamente en los márgenes\r\n-            const side = Math.floor(Math.random() * 4); // 0: top, 1: right, 2: bottom, 3: left\r\n-            const position = Math.random() * 80 + 10; // 10% a 90%\r\n-            \r\n-            switch (side) {\r\n-                case 0:\r\n-                    splatter.style.top = '10px';\r\n-                    splatter.style.left = `${position}%`;\r\n-                    break;\r\n-                case 1:\r\n-                    splatter.style.right = '10px';\r\n-                    splatter.style.top = `${position}%`;\r\n-                    break;\r\n-                case 2:\r\n-                    splatter.style.bottom = '10px';\r\n-                    splatter.style.left = `${position}%`;\r\n-                    break;\r\n-                case 3:\r\n-                    splatter.style.left = '10px';\r\n-                    splatter.style.top = `${position}%`;\r\n-                    break;\r\n-            }\r\n-            \r\n-            // Tamaño y rotación aleatorios\r\n-            const size = Math.random() * 50 + 20; // 20px a 70px\r\n-            const rotation = Math.random() * 360;\r\n-            splatter.style.width = `${size}px`;\r\n-            splatter.style.height = `${size}px`;\r\n-            splatter.style.transform = `rotate(${rotation}deg)`;\r\n-            \r\n-            // SVG de mancha de sangre digitalizada\r\n-            splatter.innerHTML = `\r\n-                <svg viewBox=\"0 0 100 100\" width=\"100%\" height=\"100%\">\r\n-                    <path d=\"M50,20 Q70,10 80,30 T60,60 Q40,80 20,50 T50,20\" \r\n-                          fill=\"#8a0303\" opacity=\"0.15\" filter=\"url(#blood-filter-${i})\"/>\r\n-                    \r\n-                    <!-- Filtros para efecto digital -->\r\n-                    <defs>\r\n-                        <filter id=\"blood-filter-${i}\">\r\n-                            <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.01\" numOctaves=\"1\" />\r\n-                            <feDisplacementMap in=\"SourceGraphic\" scale=\"5\" />\r\n-                        </filter>\r\n-                    </defs>\r\n-                </svg>\r\n-            `;\r\n-            \r\n-            this.container.appendChild(splatter);\r\n-        }\r\n+        // Mostrar y ocultar\r\n+        pentagram.classList.add('reveal');\r\n+        setTimeout(() => {\r\n+            pentagram.classList.remove('reveal');\r\n+        }, 4000);\r\n     }\r\n     \r\n-    setupRitualGlowEffect() {\r\n-        // Efecto de brillo ritual alrededor de los elementos del menú\r\n-        const menuScreen = document.querySelector('.menu-screen');\r\n-        if (menuScreen) {\r\n-            const ritualGlow = document.createElement('div');\r\n-            ritualGlow.className = 'ritual-glow';\r\n-            \r\n-            menuScreen.insertBefore(ritualGlow, menuScreen.firstChild);\r\n-            \r\n-            // Agregar símbolos arcanos en el fondo\r\n-            const arcaneSymbols = document.createElement('div');\r\n-            arcaneSymbols.className = 'arcane-symbols';\r\n-            arcaneSymbols.innerHTML = this.generateArcaneSymbols();\r\n-            \r\n-            menuScreen.insertBefore(arcaneSymbols, menuScreen.firstChild);\r\n-        }\r\n+    getPentagramSVG() {\r\n+        return `<svg width=\"400\" height=\"400\" viewBox=\"0 0 100 100\">\r\n+            <path class=\"pentagram-outline\" d=\"M50,10 L60,40 L90,40 L65,60 L75,90 L50,75 L25,90 L35,60 L10,40 L40,40 Z\" \r\n+                fill=\"none\" stroke=\"#8a0303\" stroke-opacity=\"0.5\" stroke-width=\"0.5\"/>\r\n+            <circle cx=\"50\" cy=\"50\" r=\"30\" fill=\"none\" stroke=\"#8a0303\" stroke-opacity=\"0.3\" stroke-width=\"0.5\"/>\r\n+            <text x=\"50\" y=\"53\" text-anchor=\"middle\" font-size=\"5\" fill=\"#8a0303\" fill-opacity=\"0.7\">λδφθπ</text>\r\n+        </svg>`;\r\n     }\r\n     \r\n-    generateArcaneSymbols() {\r\n-        // Generar símbolos arcanos/alquímicos con estilo digital\r\n-        let symbols = '';\r\n-        const symbolCount = 8;\r\n-        const arcaneShapes = [\r\n-            'M10,0 L20,20 L0,20 Z', // Triángulo\r\n-            'M0,0 L20,0 L20,20 L0,20 Z', // Cuadrado\r\n-            'M10,0 L20,10 L10,20 L0,10 Z', // Rombo\r\n-            'M10,0 A10,10 0 1,0 10,20 A10,10 0 1,0 10,0 Z' // Círculo\r\n-        ];\r\n+    triggerLightning() {\r\n+        const lightning = document.createElement('div');\r\n+        lightning.className = 'ambient-lightning';\r\n+        document.body.appendChild(lightning);\r\n         \r\n-        const arcaneLines = [\r\n-            'M5,10 L15,10', // Horizontal\r\n-            'M10,5 L10,15', // Vertical\r\n-            'M5,5 L15,15', // Diagonal\r\n-            'M5,15 L15,5', // Diagonal inversa\r\n-            'M10,5 Q15,10 10,15', // Curva\r\n-            'M5,10 Q10,5 15,10', // Curva\r\n-        ];\r\n+        setTimeout(() => {\r\n+            lightning.classList.add('flash');\r\n+            setTimeout(() => lightning.remove(), 1500);\r\n+        }, 100);\r\n+    }\r\n+    \r\n+    addBloodSplatter() {\r\n+        const splatter = document.createElement('div');\r\n+        splatter.className = 'blood-splatter';\r\n         \r\n-        for (let i = 0; i < symbolCount; i++) {\r\n-            // Posición aleatoria\r\n-            const x = Math.floor(Math.random() * 80) + 5; // 5% a 85%\r\n-            const y = Math.floor(Math.random() * 80) + 5; // 5% a 85%\r\n+        // Posición aleatoria\r\n+        splatter.style.left = Math.random() * 80 + 10 + '%';\r\n+        splatter.style.top = Math.random() * 80 + 10 + '%';\r\n+        splatter.style.opacity = '0';\r\n+        splatter.style.transform = 'scale(0.5)';\r\n+        \r\n+        // Tamaño aleatorio\r\n+        const size = Math.random() * 100 + 50;\r\n+        splatter.style.width = size + 'px';\r\n+        splatter.style.height = size + 'px';\r\n+        \r\n+        // Añadir SVG\r\n+        splatter.innerHTML = this.getBloodSplatterSVG();\r\n+        \r\n+        document.body.appendChild(splatter);\r\n+        \r\n+        // Animar entrada\r\n+        setTimeout(() => {\r\n+            splatter.style.opacity = '0.5';\r\n+            splatter.style.transform = 'scale(1)';\r\n+            splatter.style.transition = 'opacity 0.5s, transform 0.5s';\r\n             \r\n-            // Tamaño y opacidad aleatorios\r\n-            const size = Math.floor(Math.random() * 20) + 10; // 10px a 30px\r\n-            const opacity = (Math.random() * 0.2 + 0.1).toFixed(2); // 0.1 a 0.3\r\n-            \r\n-            // Seleccionar forma y líneas aleatorias\r\n-            const shape = arcaneShapes[Math.floor(Math.random() * arcaneShapes.length)];\r\n-            const line1 = arcaneLines[Math.floor(Math.random() * arcaneLines.length)];\r\n-            const line2 = arcaneLines[Math.floor(Math.random() * arcaneLines.length)];\r\n-            \r\n-            // Crear SVG\r\n-            symbols += `\r\n-                <svg viewBox=\"0 0 20 20\" width=\"${size}\" height=\"${size}\" \r\n-                     style=\"position: absolute; left: ${x}%; top: ${y}%; opacity: ${opacity};\">\r\n-                    <path d=\"${shape}\" fill=\"none\" stroke=\"#bf9b30\" stroke-width=\"0.5\"/>\r\n-                    <path d=\"${line1}\" stroke=\"#ff2288\" stroke-width=\"0.3\"/>\r\n-                    <path d=\"${line2}\" stroke=\"#ff2288\" stroke-width=\"0.3\"/>\r\n-                </svg>\r\n-            `;\r\n-        }\r\n+            // Desvanecer después de unos segundos\r\n+            setTimeout(() => {\r\n+                splatter.style.opacity = '0';\r\n+                setTimeout(() => splatter.remove(), 500);\r\n+            }, 3000);\r\n+        }, 10);\r\n+    }\r\n+    \r\n+    getBloodSplatterSVG() {\r\n+        const randomType = Math.floor(Math.random() * 3) + 1;\r\n         \r\n-        return symbols;\r\n+        return `<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\">\r\n+            <path d=\"M50,50 \r\n+                ${randomType === 1 ? 'Q70,30 90,50 T50,90 Q30,70 10,50 T50,10 Z' : ''}\r\n+                ${randomType === 2 ? 'Q80,40 70,70 T30,80 Q20,50 30,20 T50,10 Z' : ''}\r\n+                ${randomType === 3 ? 'Q60,20 90,30 T80,60 Q50,80 20,70 T20,30 Z' : ''}\"\r\n+                fill=\"#8a0303\" fill-opacity=\"0.5\"/>\r\n+        </svg>`;\r\n     }\r\n     \r\n-    startAmbientLightning() {\r\n-        // Efecto de relámpagos ambientales ocasionales\r\n-        const flashLightning = () => {\r\n-            // Probabilidad baja de relámpago\r\n-            if (Math.random() < 0.1) {\r\n-                const lightning = document.createElement('div');\r\n-                lightning.className = 'ambient-lightning';\r\n-                this.container.appendChild(lightning);\r\n-                \r\n-                // Activar el destello\r\n-                setTimeout(() => {\r\n-                    lightning.classList.add('flash');\r\n-                    \r\n-                    // Sonido sutil de trueno (implementado como console.log)\r\n-                    console.log('Thunder sound: distant rumble');\r\n-                    \r\n-                    // Eliminar después de animación\r\n-                    setTimeout(() => {\r\n-                        lightning.remove();\r\n-                    }, 1500);\r\n-                }, 100);\r\n-            }\r\n-            \r\n-            // Programar próximo relámpago\r\n-            const nextTime = Math.random() * 20000 + 10000; // 10-30 segundos\r\n-            setTimeout(flashLightning, nextTime);\r\n-        };\r\n+    flickerLights() {\r\n+        // Añadir clase para animación\r\n+        document.body.classList.add('flickering');\r\n         \r\n-        // Iniciar ciclo\r\n-        const initialDelay = Math.random() * 10000 + 5000;\r\n-        setTimeout(flashLightning, initialDelay);\r\n+        // Quitar después de la animación\r\n+        setTimeout(() => {\r\n+            document.body.classList.remove('flickering');\r\n+        }, 1000);\r\n     }\r\n     \r\n-    // Método para aplicar efectos adicionales a textos específicos\r\n+    /**\r\n+     * Aplica efecto de texto sangriento\r\n+     * @param {string} selector - Selector CSS para elementos\r\n+     */\r\n     applyBloodyText(selector) {\r\n         const elements = document.querySelectorAll(selector);\r\n+        \r\n         elements.forEach(element => {\r\n             element.classList.add('bloody-text');\r\n             \r\n-            // Añadir gotas de sangre digitales\r\n+            // Añadir gotas de sangre\r\n             const dropCount = Math.floor(Math.random() * 3) + 1;\r\n+            \r\n             for (let i = 0; i < dropCount; i++) {\r\n-                const drop = document.createElement('span');\r\n+                const drop = document.createElement('div');\r\n                 drop.className = 'blood-drop';\r\n-                drop.style.left = `${Math.random() * 80 + 10}%`;\r\n-                drop.style.animationDelay = `${Math.random() * 2}s`;\r\n+                \r\n+                // Posición aleatoria\r\n+                drop.style.left = Math.random() * 80 + 10 + '%';\r\n+                drop.style.animationDelay = Math.random() * 2 + 's';\r\n+                drop.style.animationDuration = Math.random() * 3 + 2 + 's';\r\n+                \r\n                 element.appendChild(drop);\r\n             }\r\n         });\r\n     }\r\n     \r\n-    // Aplicar efecto de distorsión VHS a elementos\r\n+    /**\r\n+     * Aplica distorsión VHS a elementos\r\n+     */\r\n     applyVHSDistortion(selector) {\r\n         const elements = document.querySelectorAll(selector);\r\n+        \r\n         elements.forEach(element => {\r\n             element.classList.add('vhs-distortion');\r\n             \r\n-            // Crear capas de distorsión\r\n-            const noiseLayer = document.createElement('div');\r\n-            noiseLayer.className = 'vhs-noise';\r\n+            // Añadir capas\r\n+            const noise = document.createElement('div');\r\n+            noise.className = 'vhs-noise';\r\n             \r\n-            const scanlineLayer = document.createElement('div');\r\n-            scanlineLayer.className = 'vhs-scanlines';\r\n+            const scanlines = document.createElement('div');\r\n+            scanlines.className = 'vhs-scanlines';\r\n             \r\n-            const glitchLayer = document.createElement('div');\r\n-            glitchLayer.className = 'vhs-glitch';\r\n+            const glitch = document.createElement('div');\r\n+            glitch.className = 'vhs-glitch';\r\n             \r\n-            // Insertar al principio del elemento para no afectar los eventos\r\n-            element.insertBefore(glitchLayer, element.firstChild);\r\n-            element.insertBefore(scanlineLayer, element.firstChild);\r\n-            element.insertBefore(noiseLayer, element.firstChild);\r\n+            element.appendChild(noise);\r\n+            element.appendChild(scanlines);\r\n+            element.appendChild(glitch);\r\n         });\r\n     }\r\n     \r\n-    // Añadir viñeta oscura con animación pulsante\r\n+    /**\r\n+     * Añade una viñeta oscura pulsante\r\n+     */\r\n     addDarkVignette() {\r\n+        // Verificar si ya existe\r\n+        if (document.querySelector('.dark-vignette')) return;\r\n+        \r\n         const vignette = document.createElement('div');\r\n         vignette.className = 'dark-vignette';\r\n-        this.container.appendChild(vignette);\r\n+        document.body.appendChild(vignette);\r\n         \r\n-        // Animación pulsante sutil\r\n+        // Pulso cada cierto tiempo\r\n         setInterval(() => {\r\n-            vignette.classList.toggle('pulse');\r\n-        }, 5000);\r\n+            vignette.classList.add('pulse');\r\n+            setTimeout(() => vignette.classList.remove('pulse'), 3000);\r\n+        }, 15000);\r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741034097601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,42 @@\n /**\r\n- * Clase para gestionar efectos visuales góticos\r\n+ * Efectos visuales góticos para el menú de Cybervania\r\n+ * Implementa efectos visuales inspirados en la estética gótica de Castlevania\r\n  */\r\n export class GothicEffects {\r\n     constructor(containerId) {\r\n         this.container = document.getElementById(containerId);\r\n-        this.effectsEnabled = true;\r\n         this.initialized = false;\r\n+        this.bloodParticles = [];\r\n+        \r\n         this.initialize();\r\n     }\r\n     \r\n+    /**\r\n+     * Inicializa los efectos góticos\r\n+     */\r\n     initialize() {\r\n         if (this.initialized) return;\r\n         \r\n-        // Crear elementos decorativos\r\n-        this.createGargoyles();\r\n+        // Registro de eventos para efectos interactivos\r\n+        this.setupEvents();\r\n         \r\n         this.initialized = true;\r\n     }\r\n     \r\n+    /**\r\n+     * Configura eventos para efectos interactivos\r\n+     */\r\n+    setupEvents() {\r\n+        // Agregar efectos de hover para títulos\r\n+        document.querySelectorAll('h1, h2, h3, h4, h5').forEach(element => {\r\n+            element.addEventListener('mouseenter', () => this.pulseElement(element));\r\n+        });\r\n+        \r\n+        // Efecto de sangre en clic (deshabilitado por defecto, muy dramático)\r\n+        // document.addEventListener('click', (e) => this.addBloodSplatter(e.clientX, e.clientY));\r\n+    }\r\n+    \r\n     createGargoyles() {\r\n         // Posiciones para las gárgolas\r\n         const positions = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\r\n         \r\n"
                },
                {
                    "date": 1741034911476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,13 @@\n         this.initialized = false;\r\n         this.bloodParticles = [];\r\n         \r\n         this.initialize();\r\n+        \r\n+        // Añadimos directamente los elementos góticos\r\n+        this.addBloodCorners();\r\n+        this.createCandlesEffect();\r\n+        this.addGothicDetailOverlay();\r\n     }\r\n     \r\n     /**\r\n      * Inicializa los efectos góticos\r\n@@ -20,8 +25,11 @@\n         // Registro de eventos para efectos interactivos\r\n         this.setupEvents();\r\n         \r\n         this.initialized = true;\r\n+        \r\n+        // Efecto pasivo de sangre goteando\r\n+        this.setupBloodDripping();\r\n     }\r\n     \r\n     /**\r\n      * Configura eventos para efectos interactivos\r\n@@ -278,5 +286,238 @@\n             vignette.classList.add('pulse');\r\n             setTimeout(() => vignette.classList.remove('pulse'), 3000);\r\n         }, 15000);\r\n     }\r\n+    \r\n+    /**\r\n+     * Añade esquinas con sangre en las cuatro esquinas de la pantalla\r\n+     */\r\n+    addBloodCorners() {\r\n+        const corners = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\r\n+        \r\n+        corners.forEach(position => {\r\n+            const bloodCorner = document.createElement('div');\r\n+            bloodCorner.className = `blood-corner ${position}`;\r\n+            \r\n+            // Configuramos el CSS directamente\r\n+            bloodCorner.style.cssText = `\r\n+                position: fixed;\r\n+                width: 150px;\r\n+                height: 150px;\r\n+                background-image: url('../assets/images/effects/blood_corner.png');\r\n+                background-size: contain;\r\n+                background-repeat: no-repeat;\r\n+                pointer-events: none;\r\n+                z-index: 5;\r\n+                opacity: 0.7;\r\n+            `;\r\n+            \r\n+            // Ajustar posición según esquina\r\n+            switch (position) {\r\n+                case 'top-left':\r\n+                    bloodCorner.style.top = '0';\r\n+                    bloodCorner.style.left = '0';\r\n+                    break;\r\n+                case 'top-right':\r\n+                    bloodCorner.style.top = '0';\r\n+                    bloodCorner.style.right = '0';\r\n+                    bloodCorner.style.transform = 'scaleX(-1)';\r\n+                    break;\r\n+                case 'bottom-left':\r\n+                    bloodCorner.style.bottom = '0';\r\n+                    bloodCorner.style.left = '0';\r\n+                    bloodCorner.style.transform = 'scaleY(-1)';\r\n+                    break;\r\n+                case 'bottom-right':\r\n+                    bloodCorner.style.bottom = '0';\r\n+                    bloodCorner.style.right = '0';\r\n+                    bloodCorner.style.transform = 'scale(-1)';\r\n+                    break;\r\n+            }\r\n+            \r\n+            // Si no hay imagen, crear un efecto SVG similar\r\n+            if (position === 'top-left') {\r\n+                bloodCorner.innerHTML = `\r\n+                    <svg width=\"150\" height=\"150\" viewBox=\"0 0 100 100\">\r\n+                        <path d=\"M0,0 Q30,5 50,15 T80,40 Q70,50 50,45 T20,40 Q10,30 0,0 Z\" \r\n+                            fill=\"#570707\" fill-opacity=\"0.7\"/>\r\n+                        <path d=\"M0,0 Q10,30 30,20 T40,30 Q35,45 20,25 T0,30 L0,0 Z\" \r\n+                            fill=\"#800e0e\" fill-opacity=\"0.8\"/>\r\n+                    </svg>\r\n+                `;\r\n+            }\r\n+            \r\n+            document.body.appendChild(bloodCorner);\r\n+        });\r\n+    }\r\n+    \r\n+    /**\r\n+     * Crea efecto de velas/antorchas en los lados\r\n+     */\r\n+    createCandlesEffect() {\r\n+        const candlePositions = [\r\n+            { left: '10%', top: '30%' },\r\n+            { left: '90%', top: '30%' },\r\n+            { left: '5%', top: '60%' },\r\n+            { left: '95%', top: '60%' }\r\n+        ];\r\n+        \r\n+        candlePositions.forEach(pos => {\r\n+            const candle = document.createElement('div');\r\n+            candle.className = 'gothic-candle';\r\n+            candle.style.cssText = `\r\n+                position: fixed;\r\n+                width: 16px;\r\n+                height: 32px;\r\n+                left: ${pos.left};\r\n+                top: ${pos.top};\r\n+                z-index: 4;\r\n+                pointer-events: none;\r\n+            `;\r\n+            \r\n+            // Añadir base de la vela\r\n+            const candleBase = document.createElement('div');\r\n+            candleBase.style.cssText = `\r\n+                position: absolute;\r\n+                bottom: 0;\r\n+                left: 0;\r\n+                width: 16px;\r\n+                height: 16px;\r\n+                background-color: #5d1c00;\r\n+            `;\r\n+            \r\n+            // Añadir llama\r\n+            const flame = document.createElement('div');\r\n+            flame.style.cssText = `\r\n+                position: absolute;\r\n+                bottom: 14px;\r\n+                left: 4px;\r\n+                width: 8px;\r\n+                height: 16px;\r\n+                background: linear-gradient(to top, #ff6600, #ffcc00);\r\n+                border-radius: 8px 8px 0 0;\r\n+                animation: flame-flicker 1s infinite alternate ease-in-out;\r\n+            `;\r\n+            \r\n+            // Añadir brillo\r\n+            const glow = document.createElement('div');\r\n+            glow.style.cssText = `\r\n+                position: absolute;\r\n+                left: -32px;\r\n+                top: -32px;\r\n+                width: 80px;\r\n+                height: 80px;\r\n+                border-radius: 50%;\r\n+                background: radial-gradient(circle, \r\n+                    rgba(255, 204, 0, 0.3) 0%, \r\n+                    rgba(255, 102, 0, 0.1) 40%, \r\n+                    rgba(0, 0, 0, 0) 70%\r\n+                );\r\n+                animation: glow-pulse 2s infinite alternate;\r\n+            `;\r\n+            \r\n+            candle.appendChild(candleBase);\r\n+            candle.appendChild(flame);\r\n+            candle.appendChild(glow);\r\n+            \r\n+            document.body.appendChild(candle);\r\n+        });\r\n+        \r\n+        // Añadir estilos para animaciones\r\n+        const style = document.createElement('style');\r\n+        style.textContent = `\r\n+            @keyframes flame-flicker {\r\n+                0%, 100% { transform: scale(1); }\r\n+                50% { transform: scale(1.1, 1.2); }\r\n+            }\r\n+            \r\n+            @keyframes glow-pulse {\r\n+                0%, 100% { opacity: 0.7; }\r\n+                50% { opacity: 0.3; }\r\n+            }\r\n+        `;\r\n+        document.head.appendChild(style);\r\n+    }\r\n+    \r\n+    /**\r\n+     * Añade un overlay con detalles góticos\r\n+     */\r\n+    addGothicDetailOverlay() {\r\n+        // Crear arcos góticos en la parte superior\r\n+        const arches = document.createElement('div');\r\n+        arches.className = 'gothic-arches';\r\n+        arches.style.cssText = `\r\n+            position: fixed;\r\n+            top: 0;\r\n+            left: 0;\r\n+            right: 0;\r\n+            height: 80px;\r\n+            background-image: url('../assets/images/decorations/gothic_arches.png');\r\n+            background-size: auto 100%;\r\n+            background-repeat: repeat-x;\r\n+            background-position: center top;\r\n+            pointer-events: none;\r\n+            z-index: 4;\r\n+            opacity: 0.7;\r\n+        `;\r\n+        \r\n+        // Si no hay imagen, creamos un SVG inline\r\n+        arches.innerHTML = `\r\n+            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 800 100\" preserveAspectRatio=\"xMidYMax slice\">\r\n+                <defs>\r\n+                    <pattern id=\"archPattern\" patternUnits=\"userSpaceOnUse\" width=\"200\" height=\"100\">\r\n+                        <path d=\"M0,100 L0,40 Q40,0 100,40 Q160,0 200,40 L200,100 Z\" \r\n+                              fill=\"none\" stroke=\"#800e0e\" stroke-width=\"2\"/>\r\n+                        <path d=\"M50,100 L50,60 Q75,40 100,60 Q125,40 150,60 L150,100\" \r\n+                              fill=\"none\" stroke=\"#570707\" stroke-width=\"3\"/>\r\n+                    </pattern>\r\n+                </defs>\r\n+                <rect width=\"100%\" height=\"100\" fill=\"url(#archPattern)\"/>\r\n+            </svg>\r\n+        `;\r\n+        \r\n+        document.body.appendChild(arches);\r\n+    }\r\n+    \r\n+    /**\r\n+     * Configura el efecto de sangre goteando desde la parte superior\r\n+     */\r\n+    setupBloodDripping() {\r\n+        // Crear 5-8 gotas de sangre aleatorias\r\n+        const dropCount = 5 + Math.floor(Math.random() * 4);\r\n+        \r\n+        for (let i = 0; i < dropCount; i++) {\r\n+            // Posicionar aleatoriamente en la parte superior\r\n+            const xPos = Math.random() * 100; // posición horizontal aleatoria\r\n+            \r\n+            this.createBloodDrop(xPos);\r\n+        }\r\n+    }\r\n+    \r\n+    /**\r\n+     * Crea una gota de sangre en la posición indicada\r\n+     */\r\n+    createBloodDrop(xPos) {\r\n+        const drop = document.createElement('div');\r\n+        drop.className = 'blood-drop';\r\n+        \r\n+        // Características aleatorias para la gota\r\n+        const width = 4 + Math.floor(Math.random() * 4); // 4-8px\r\n+        const delay = Math.random() * 10; // 0-10s de retraso\r\n+        const duration = 6 + Math.random() * 10; // 6-16s para caer\r\n+        \r\n+        drop.style.cssText = `\r\n+            position: fixed;\r\n+            top: -20px;\r\n+            left: ${xPos}%;\r\n+            width: ${width}px;\r\n+            height: 20px;\r\n+            background-color: #800e0e;\r\n+            border-radius: 0 0 50% 50%;\r\n+            opacity: 0.7;\r\n+            z-index: 3;\r\n+            animation: blood-dripping ${duration}s infinite ${delay}s linear;\r\n+        `;\r\n+        \r\n+        document.body.appendChild(drop);\r\n+    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741035920727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,15 +5,11 @@\n export class GothicEffects {\r\n     constructor(containerId) {\r\n         this.container = document.getElementById(containerId);\r\n         this.initialized = false;\r\n-        this.bloodParticles = [];\r\n         \r\n         this.initialize();\r\n         \r\n-        // Añadimos directamente los elementos góticos\r\n-        this.addBloodCorners();\r\n-        this.createCandlesEffect();\r\n         this.addGothicDetailOverlay();\r\n     }\r\n     \r\n     /**\r\n@@ -25,11 +21,8 @@\n         // Registro de eventos para efectos interactivos\r\n         this.setupEvents();\r\n         \r\n         this.initialized = true;\r\n-        \r\n-        // Efecto pasivo de sangre goteando\r\n-        this.setupBloodDripping();\r\n     }\r\n     \r\n     /**\r\n      * Configura eventos para efectos interactivos\r\n@@ -38,11 +31,8 @@\n         // Agregar efectos de hover para títulos\r\n         document.querySelectorAll('h1, h2, h3, h4, h5').forEach(element => {\r\n             element.addEventListener('mouseenter', () => this.pulseElement(element));\r\n         });\r\n-        \r\n-        // Efecto de sangre en clic (deshabilitado por defecto, muy dramático)\r\n-        // document.addEventListener('click', (e) => this.addBloodSplatter(e.clientX, e.clientY));\r\n     }\r\n     \r\n     createGargoyles() {\r\n         // Posiciones para las gárgolas\r\n@@ -69,17 +59,17 @@\n     getGargoyleSVG() {\r\n         return `<svg viewBox=\"0 0 100 100\" width=\"100%\" height=\"100%\">\r\n             <path d=\"M50,20 Q60,10 70,15 T80,40 Q70,50 50,45 T20,40 Q30,30 50,20 Z\" \r\n                 fill=\"#2d0245\" stroke=\"#bf9b30\" stroke-width=\"1\"/>\r\n-            <circle cx=\"40\" cy=\"25\" r=\"3\" fill=\"#8a0303\"/>\r\n-            <circle cx=\"60\" cy=\"25\" r=\"3\" fill=\"#8a0303\"/>\r\n+            <circle cx=\"40\" cy=\"25\" r=\"3\" fill=\"#430e0e\"/>\r\n+            <circle cx=\"60\" cy=\"25\" r=\"3\" fill=\"#430e0e\"/>\r\n             <path d=\"M45,35 Q50,40 55,35\" fill=\"none\" stroke=\"#bf9b30\" stroke-width=\"1\"/>\r\n         </svg>`;\r\n     }\r\n     \r\n     triggerRandomEvent() {\r\n         // Provocar efectos aleatorios\r\n-        const randomEffect = Math.floor(Math.random() * 5);\r\n+        const randomEffect = Math.floor(Math.random() * 3);\r\n         \r\n         switch (randomEffect) {\r\n             case 0:\r\n                 this.pulseBackground();\r\n@@ -87,14 +77,8 @@\n             case 1:\r\n                 this.revealPentagram();\r\n                 break;\r\n             case 2:\r\n-                this.triggerLightning();\r\n-                break;\r\n-            case 3:\r\n-                this.addBloodSplatter();\r\n-                break;\r\n-            case 4:\r\n                 this.flickerLights();\r\n                 break;\r\n         }\r\n     }\r\n@@ -144,8 +128,24 @@\n     \r\n     getPentagramSVG() {\r\n         return `<svg width=\"400\" height=\"400\" viewBox=\"0 0 100 100\">\r\n             <path class=\"pentagram-outline\" d=\"M50,10 L60,40 L90,40 L65,60 L75,90 L50,75 L25,90 L35,60 L10,40 L40,40 Z\" \r\n+                fill=\"none\" stroke=\"#430e0e\" stroke-opacity=\"0.5\" stroke-width=\"0.5\"/>\r\n+            <circle cx=\"50\" cy=\"50\" r=\"30\" fill=\"none\" stroke=\"#430e0e\" stroke-opacity=\"0.3\" stroke-width=\"0.5\"/>\r\n+            <text x=\"50\" y=\"53\" text-anchor=\"middle\" font-size=\"5\" fill=\"#430e0e\" fill-opacity=\"0.7\">λδφθπ</text>\r\n+        </svg>`;\r\n+    }\r\n+    \r\n+    flickerLights() {\r\n+        // Añadir clase para animación\r\n+        setTimeout(() => {\r\n+            pentagram.classList.remove('reveal');\r\n+        }, 4000);\r\n+    }\r\n+    \r\n+    getPentagramSVG() {\r\n+        return `<svg width=\"400\" height=\"400\" viewBox=\"0 0 100 100\">\r\n+            <path class=\"pentagram-outline\" d=\"M50,10 L60,40 L90,40 L65,60 L75,90 L50,75 L25,90 L35,60 L10,40 L40,40 Z\" \r\n                 fill=\"none\" stroke=\"#8a0303\" stroke-opacity=\"0.5\" stroke-width=\"0.5\"/>\r\n             <circle cx=\"50\" cy=\"50\" r=\"30\" fill=\"none\" stroke=\"#8a0303\" stroke-opacity=\"0.3\" stroke-width=\"0.5\"/>\r\n             <text x=\"50\" y=\"53\" text-anchor=\"middle\" font-size=\"5\" fill=\"#8a0303\" fill-opacity=\"0.7\">λδφθπ</text>\r\n         </svg>`;\r\n"
                },
                {
                    "date": 1741035954672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,81 +136,8 @@\n     }\r\n     \r\n     flickerLights() {\r\n         // Añadir clase para animación\r\n-        setTimeout(() => {\r\n-            pentagram.classList.remove('reveal');\r\n-        }, 4000);\r\n-    }\r\n-    \r\n-    getPentagramSVG() {\r\n-        return `<svg width=\"400\" height=\"400\" viewBox=\"0 0 100 100\">\r\n-            <path class=\"pentagram-outline\" d=\"M50,10 L60,40 L90,40 L65,60 L75,90 L50,75 L25,90 L35,60 L10,40 L40,40 Z\" \r\n-                fill=\"none\" stroke=\"#8a0303\" stroke-opacity=\"0.5\" stroke-width=\"0.5\"/>\r\n-            <circle cx=\"50\" cy=\"50\" r=\"30\" fill=\"none\" stroke=\"#8a0303\" stroke-opacity=\"0.3\" stroke-width=\"0.5\"/>\r\n-            <text x=\"50\" y=\"53\" text-anchor=\"middle\" font-size=\"5\" fill=\"#8a0303\" fill-opacity=\"0.7\">λδφθπ</text>\r\n-        </svg>`;\r\n-    }\r\n-    \r\n-    triggerLightning() {\r\n-        const lightning = document.createElement('div');\r\n-        lightning.className = 'ambient-lightning';\r\n-        document.body.appendChild(lightning);\r\n-        \r\n-        setTimeout(() => {\r\n-            lightning.classList.add('flash');\r\n-            setTimeout(() => lightning.remove(), 1500);\r\n-        }, 100);\r\n-    }\r\n-    \r\n-    addBloodSplatter() {\r\n-        const splatter = document.createElement('div');\r\n-        splatter.className = 'blood-splatter';\r\n-        \r\n-        // Posición aleatoria\r\n-        splatter.style.left = Math.random() * 80 + 10 + '%';\r\n-        splatter.style.top = Math.random() * 80 + 10 + '%';\r\n-        splatter.style.opacity = '0';\r\n-        splatter.style.transform = 'scale(0.5)';\r\n-        \r\n-        // Tamaño aleatorio\r\n-        const size = Math.random() * 100 + 50;\r\n-        splatter.style.width = size + 'px';\r\n-        splatter.style.height = size + 'px';\r\n-        \r\n-        // Añadir SVG\r\n-        splatter.innerHTML = this.getBloodSplatterSVG();\r\n-        \r\n-        document.body.appendChild(splatter);\r\n-        \r\n-        // Animar entrada\r\n-        setTimeout(() => {\r\n-            splatter.style.opacity = '0.5';\r\n-            splatter.style.transform = 'scale(1)';\r\n-            splatter.style.transition = 'opacity 0.5s, transform 0.5s';\r\n-            \r\n-            // Desvanecer después de unos segundos\r\n-            setTimeout(() => {\r\n-                splatter.style.opacity = '0';\r\n-                setTimeout(() => splatter.remove(), 500);\r\n-            }, 3000);\r\n-        }, 10);\r\n-    }\r\n-    \r\n-    getBloodSplatterSVG() {\r\n-        const randomType = Math.floor(Math.random() * 3) + 1;\r\n-        \r\n-        return `<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\">\r\n-            <path d=\"M50,50 \r\n-                ${randomType === 1 ? 'Q70,30 90,50 T50,90 Q30,70 10,50 T50,10 Z' : ''}\r\n-                ${randomType === 2 ? 'Q80,40 70,70 T30,80 Q20,50 30,20 T50,10 Z' : ''}\r\n-                ${randomType === 3 ? 'Q60,20 90,30 T80,60 Q50,80 20,70 T20,30 Z' : ''}\"\r\n-                fill=\"#8a0303\" fill-opacity=\"0.5\"/>\r\n-        </svg>`;\r\n-    }\r\n-    \r\n-    flickerLights() {\r\n-        // Añadir clase para animación\r\n         document.body.classList.add('flickering');\r\n         \r\n         // Quitar después de la animación\r\n         setTimeout(() => {\r\n@@ -218,35 +145,8 @@\n         }, 1000);\r\n     }\r\n     \r\n     /**\r\n-     * Aplica efecto de texto sangriento\r\n-     * @param {string} selector - Selector CSS para elementos\r\n-     */\r\n-    applyBloodyText(selector) {\r\n-        const elements = document.querySelectorAll(selector);\r\n-        \r\n-        elements.forEach(element => {\r\n-            element.classList.add('bloody-text');\r\n-            \r\n-            // Añadir gotas de sangre\r\n-            const dropCount = Math.floor(Math.random() * 3) + 1;\r\n-            \r\n-            for (let i = 0; i < dropCount; i++) {\r\n-                const drop = document.createElement('div');\r\n-                drop.className = 'blood-drop';\r\n-                \r\n-                // Posición aleatoria\r\n-                drop.style.left = Math.random() * 80 + 10 + '%';\r\n-                drop.style.animationDelay = Math.random() * 2 + 's';\r\n-                drop.style.animationDuration = Math.random() * 3 + 2 + 's';\r\n-                \r\n-                element.appendChild(drop);\r\n-            }\r\n-        });\r\n-    }\r\n-    \r\n-    /**\r\n      * Aplica distorsión VHS a elementos\r\n      */\r\n     applyVHSDistortion(selector) {\r\n         const elements = document.querySelectorAll(selector);\r\n@@ -288,158 +188,8 @@\n         }, 15000);\r\n     }\r\n     \r\n     /**\r\n-     * Añade esquinas con sangre en las cuatro esquinas de la pantalla\r\n-     */\r\n-    addBloodCorners() {\r\n-        const corners = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\r\n-        \r\n-        corners.forEach(position => {\r\n-            const bloodCorner = document.createElement('div');\r\n-            bloodCorner.className = `blood-corner ${position}`;\r\n-            \r\n-            // Configuramos el CSS directamente\r\n-            bloodCorner.style.cssText = `\r\n-                position: fixed;\r\n-                width: 150px;\r\n-                height: 150px;\r\n-                background-image: url('../assets/images/effects/blood_corner.png');\r\n-                background-size: contain;\r\n-                background-repeat: no-repeat;\r\n-                pointer-events: none;\r\n-                z-index: 5;\r\n-                opacity: 0.7;\r\n-            `;\r\n-            \r\n-            // Ajustar posición según esquina\r\n-            switch (position) {\r\n-                case 'top-left':\r\n-                    bloodCorner.style.top = '0';\r\n-                    bloodCorner.style.left = '0';\r\n-                    break;\r\n-                case 'top-right':\r\n-                    bloodCorner.style.top = '0';\r\n-                    bloodCorner.style.right = '0';\r\n-                    bloodCorner.style.transform = 'scaleX(-1)';\r\n-                    break;\r\n-                case 'bottom-left':\r\n-                    bloodCorner.style.bottom = '0';\r\n-                    bloodCorner.style.left = '0';\r\n-                    bloodCorner.style.transform = 'scaleY(-1)';\r\n-                    break;\r\n-                case 'bottom-right':\r\n-                    bloodCorner.style.bottom = '0';\r\n-                    bloodCorner.style.right = '0';\r\n-                    bloodCorner.style.transform = 'scale(-1)';\r\n-                    break;\r\n-            }\r\n-            \r\n-            // Si no hay imagen, crear un efecto SVG similar\r\n-            if (position === 'top-left') {\r\n-                bloodCorner.innerHTML = `\r\n-                    <svg width=\"150\" height=\"150\" viewBox=\"0 0 100 100\">\r\n-                        <path d=\"M0,0 Q30,5 50,15 T80,40 Q70,50 50,45 T20,40 Q10,30 0,0 Z\" \r\n-                            fill=\"#570707\" fill-opacity=\"0.7\"/>\r\n-                        <path d=\"M0,0 Q10,30 30,20 T40,30 Q35,45 20,25 T0,30 L0,0 Z\" \r\n-                            fill=\"#800e0e\" fill-opacity=\"0.8\"/>\r\n-                    </svg>\r\n-                `;\r\n-            }\r\n-            \r\n-            document.body.appendChild(bloodCorner);\r\n-        });\r\n-    }\r\n-    \r\n-    /**\r\n-     * Crea efecto de velas/antorchas en los lados\r\n-     */\r\n-    createCandlesEffect() {\r\n-        const candlePositions = [\r\n-            { left: '10%', top: '30%' },\r\n-            { left: '90%', top: '30%' },\r\n-            { left: '5%', top: '60%' },\r\n-            { left: '95%', top: '60%' }\r\n-        ];\r\n-        \r\n-        candlePositions.forEach(pos => {\r\n-            const candle = document.createElement('div');\r\n-            candle.className = 'gothic-candle';\r\n-            candle.style.cssText = `\r\n-                position: fixed;\r\n-                width: 16px;\r\n-                height: 32px;\r\n-                left: ${pos.left};\r\n-                top: ${pos.top};\r\n-                z-index: 4;\r\n-                pointer-events: none;\r\n-            `;\r\n-            \r\n-            // Añadir base de la vela\r\n-            const candleBase = document.createElement('div');\r\n-            candleBase.style.cssText = `\r\n-                position: absolute;\r\n-                bottom: 0;\r\n-                left: 0;\r\n-                width: 16px;\r\n-                height: 16px;\r\n-                background-color: #5d1c00;\r\n-            `;\r\n-            \r\n-            // Añadir llama\r\n-            const flame = document.createElement('div');\r\n-            flame.style.cssText = `\r\n-                position: absolute;\r\n-                bottom: 14px;\r\n-                left: 4px;\r\n-                width: 8px;\r\n-                height: 16px;\r\n-                background: linear-gradient(to top, #ff6600, #ffcc00);\r\n-                border-radius: 8px 8px 0 0;\r\n-                animation: flame-flicker 1s infinite alternate ease-in-out;\r\n-            `;\r\n-            \r\n-            // Añadir brillo\r\n-            const glow = document.createElement('div');\r\n-            glow.style.cssText = `\r\n-                position: absolute;\r\n-                left: -32px;\r\n-                top: -32px;\r\n-                width: 80px;\r\n-                height: 80px;\r\n-                border-radius: 50%;\r\n-                background: radial-gradient(circle, \r\n-                    rgba(255, 204, 0, 0.3) 0%, \r\n-                    rgba(255, 102, 0, 0.1) 40%, \r\n-                    rgba(0, 0, 0, 0) 70%\r\n-                );\r\n-                animation: glow-pulse 2s infinite alternate;\r\n-            `;\r\n-            \r\n-            candle.appendChild(candleBase);\r\n-            candle.appendChild(flame);\r\n-            candle.appendChild(glow);\r\n-            \r\n-            document.body.appendChild(candle);\r\n-        });\r\n-        \r\n-        // Añadir estilos para animaciones\r\n-        const style = document.createElement('style');\r\n-        style.textContent = `\r\n-            @keyframes flame-flicker {\r\n-                0%, 100% { transform: scale(1); }\r\n-                50% { transform: scale(1.1, 1.2); }\r\n-            }\r\n-            \r\n-            @keyframes glow-pulse {\r\n-                0%, 100% { opacity: 0.7; }\r\n-                50% { opacity: 0.3; }\r\n-            }\r\n-        `;\r\n-        document.head.appendChild(style);\r\n-    }\r\n-    \r\n-    /**\r\n      * Añade un overlay con detalles góticos\r\n      */\r\n     addGothicDetailOverlay() {\r\n         // Crear arcos góticos en la parte superior\r\n@@ -465,59 +215,16 @@\n             <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 800 100\" preserveAspectRatio=\"xMidYMax slice\">\r\n                 <defs>\r\n                     <pattern id=\"archPattern\" patternUnits=\"userSpaceOnUse\" width=\"200\" height=\"100\">\r\n                         <path d=\"M0,100 L0,40 Q40,0 100,40 Q160,0 200,40 L200,100 Z\" \r\n-                              fill=\"none\" stroke=\"#800e0e\" stroke-width=\"2\"/>\r\n+                              fill=\"none\" stroke=\"#430e0e\" stroke-width=\"2\"/>\r\n                         <path d=\"M50,100 L50,60 Q75,40 100,60 Q125,40 150,60 L150,100\" \r\n-                              fill=\"none\" stroke=\"#570707\" stroke-width=\"3\"/>\r\n+                              fill=\"none\" stroke=\"#35102a\" stroke-width=\"3\"/>\r\n                     </pattern>\r\n                 </defs>\r\n                 <rect width=\"100%\" height=\"100\" fill=\"url(#archPattern)\"/>\r\n             </svg>\r\n         `;\r\n         \r\n         document.body.appendChild(arches);\r\n     }\r\n-    \r\n-    /**\r\n-     * Configura el efecto de sangre goteando desde la parte superior\r\n-     */\r\n-    setupBloodDripping() {\r\n-        // Crear 5-8 gotas de sangre aleatorias\r\n-        const dropCount = 5 + Math.floor(Math.random() * 4);\r\n-        \r\n-        for (let i = 0; i < dropCount; i++) {\r\n-            // Posicionar aleatoriamente en la parte superior\r\n-            const xPos = Math.random() * 100; // posición horizontal aleatoria\r\n-            \r\n-            this.createBloodDrop(xPos);\r\n-        }\r\n-    }\r\n-    \r\n-    /**\r\n-     * Crea una gota de sangre en la posición indicada\r\n-     */\r\n-    createBloodDrop(xPos) {\r\n-        const drop = document.createElement('div');\r\n-        drop.className = 'blood-drop';\r\n-        \r\n-        // Características aleatorias para la gota\r\n-        const width = 4 + Math.floor(Math.random() * 4); // 4-8px\r\n-        const delay = Math.random() * 10; // 0-10s de retraso\r\n-        const duration = 6 + Math.random() * 10; // 6-16s para caer\r\n-        \r\n-        drop.style.cssText = `\r\n-            position: fixed;\r\n-            top: -20px;\r\n-            left: ${xPos}%;\r\n-            width: ${width}px;\r\n-            height: 20px;\r\n-            background-color: #800e0e;\r\n-            border-radius: 0 0 50% 50%;\r\n-            opacity: 0.7;\r\n-            z-index: 3;\r\n-            animation: blood-dripping ${duration}s infinite ${delay}s linear;\r\n-        `;\r\n-        \r\n-        document.body.appendChild(drop);\r\n-    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741035965083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,8 +136,81 @@\n     }\r\n     \r\n     flickerLights() {\r\n         // Añadir clase para animación\r\n+        setTimeout(() => {\r\n+            pentagram.classList.remove('reveal');\r\n+        }, 4000);\r\n+    }\r\n+    \r\n+    getPentagramSVG() {\r\n+        return `<svg width=\"400\" height=\"400\" viewBox=\"0 0 100 100\">\r\n+            <path class=\"pentagram-outline\" d=\"M50,10 L60,40 L90,40 L65,60 L75,90 L50,75 L25,90 L35,60 L10,40 L40,40 Z\" \r\n+                fill=\"none\" stroke=\"#8a0303\" stroke-opacity=\"0.5\" stroke-width=\"0.5\"/>\r\n+            <circle cx=\"50\" cy=\"50\" r=\"30\" fill=\"none\" stroke=\"#8a0303\" stroke-opacity=\"0.3\" stroke-width=\"0.5\"/>\r\n+            <text x=\"50\" y=\"53\" text-anchor=\"middle\" font-size=\"5\" fill=\"#8a0303\" fill-opacity=\"0.7\">λδφθπ</text>\r\n+        </svg>`;\r\n+    }\r\n+    \r\n+    triggerLightning() {\r\n+        const lightning = document.createElement('div');\r\n+        lightning.className = 'ambient-lightning';\r\n+        document.body.appendChild(lightning);\r\n+        \r\n+        setTimeout(() => {\r\n+            lightning.classList.add('flash');\r\n+            setTimeout(() => lightning.remove(), 1500);\r\n+        }, 100);\r\n+    }\r\n+    \r\n+    addBloodSplatter() {\r\n+        const splatter = document.createElement('div');\r\n+        splatter.className = 'blood-splatter';\r\n+        \r\n+        // Posición aleatoria\r\n+        splatter.style.left = Math.random() * 80 + 10 + '%';\r\n+        splatter.style.top = Math.random() * 80 + 10 + '%';\r\n+        splatter.style.opacity = '0';\r\n+        splatter.style.transform = 'scale(0.5)';\r\n+        \r\n+        // Tamaño aleatorio\r\n+        const size = Math.random() * 100 + 50;\r\n+        splatter.style.width = size + 'px';\r\n+        splatter.style.height = size + 'px';\r\n+        \r\n+        // Añadir SVG\r\n+        splatter.innerHTML = this.getBloodSplatterSVG();\r\n+        \r\n+        document.body.appendChild(splatter);\r\n+        \r\n+        // Animar entrada\r\n+        setTimeout(() => {\r\n+            splatter.style.opacity = '0.5';\r\n+            splatter.style.transform = 'scale(1)';\r\n+            splatter.style.transition = 'opacity 0.5s, transform 0.5s';\r\n+            \r\n+            // Desvanecer después de unos segundos\r\n+            setTimeout(() => {\r\n+                splatter.style.opacity = '0';\r\n+                setTimeout(() => splatter.remove(), 500);\r\n+            }, 3000);\r\n+        }, 10);\r\n+    }\r\n+    \r\n+    getBloodSplatterSVG() {\r\n+        const randomType = Math.floor(Math.random() * 3) + 1;\r\n+        \r\n+        return `<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\">\r\n+            <path d=\"M50,50 \r\n+                ${randomType === 1 ? 'Q70,30 90,50 T50,90 Q30,70 10,50 T50,10 Z' : ''}\r\n+                ${randomType === 2 ? 'Q80,40 70,70 T30,80 Q20,50 30,20 T50,10 Z' : ''}\r\n+                ${randomType === 3 ? 'Q60,20 90,30 T80,60 Q50,80 20,70 T20,30 Z' : ''}\"\r\n+                fill=\"#8a0303\" fill-opacity=\"0.5\"/>\r\n+        </svg>`;\r\n+    }\r\n+    \r\n+    flickerLights() {\r\n+        // Añadir clase para animación\r\n         document.body.classList.add('flickering');\r\n         \r\n         // Quitar después de la animación\r\n         setTimeout(() => {\r\n@@ -145,8 +218,35 @@\n         }, 1000);\r\n     }\r\n     \r\n     /**\r\n+     * Aplica efecto de texto sangriento\r\n+     * @param {string} selector - Selector CSS para elementos\r\n+     */\r\n+    applyBloodyText(selector) {\r\n+        const elements = document.querySelectorAll(selector);\r\n+        \r\n+        elements.forEach(element => {\r\n+            element.classList.add('bloody-text');\r\n+            \r\n+            // Añadir gotas de sangre\r\n+            const dropCount = Math.floor(Math.random() * 3) + 1;\r\n+            \r\n+            for (let i = 0; i < dropCount; i++) {\r\n+                const drop = document.createElement('div');\r\n+                drop.className = 'blood-drop';\r\n+                \r\n+                // Posición aleatoria\r\n+                drop.style.left = Math.random() * 80 + 10 + '%';\r\n+                drop.style.animationDelay = Math.random() * 2 + 's';\r\n+                drop.style.animationDuration = Math.random() * 3 + 2 + 's';\r\n+                \r\n+                element.appendChild(drop);\r\n+            }\r\n+        });\r\n+    }\r\n+    \r\n+    /**\r\n      * Aplica distorsión VHS a elementos\r\n      */\r\n     applyVHSDistortion(selector) {\r\n         const elements = document.querySelectorAll(selector);\r\n@@ -188,8 +288,158 @@\n         }, 15000);\r\n     }\r\n     \r\n     /**\r\n+     * Añade esquinas con sangre en las cuatro esquinas de la pantalla\r\n+     */\r\n+    addBloodCorners() {\r\n+        const corners = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\r\n+        \r\n+        corners.forEach(position => {\r\n+            const bloodCorner = document.createElement('div');\r\n+            bloodCorner.className = `blood-corner ${position}`;\r\n+            \r\n+            // Configuramos el CSS directamente\r\n+            bloodCorner.style.cssText = `\r\n+                position: fixed;\r\n+                width: 150px;\r\n+                height: 150px;\r\n+                background-image: url('../assets/images/effects/blood_corner.png');\r\n+                background-size: contain;\r\n+                background-repeat: no-repeat;\r\n+                pointer-events: none;\r\n+                z-index: 5;\r\n+                opacity: 0.7;\r\n+            `;\r\n+            \r\n+            // Ajustar posición según esquina\r\n+            switch (position) {\r\n+                case 'top-left':\r\n+                    bloodCorner.style.top = '0';\r\n+                    bloodCorner.style.left = '0';\r\n+                    break;\r\n+                case 'top-right':\r\n+                    bloodCorner.style.top = '0';\r\n+                    bloodCorner.style.right = '0';\r\n+                    bloodCorner.style.transform = 'scaleX(-1)';\r\n+                    break;\r\n+                case 'bottom-left':\r\n+                    bloodCorner.style.bottom = '0';\r\n+                    bloodCorner.style.left = '0';\r\n+                    bloodCorner.style.transform = 'scaleY(-1)';\r\n+                    break;\r\n+                case 'bottom-right':\r\n+                    bloodCorner.style.bottom = '0';\r\n+                    bloodCorner.style.right = '0';\r\n+                    bloodCorner.style.transform = 'scale(-1)';\r\n+                    break;\r\n+            }\r\n+            \r\n+            // Si no hay imagen, crear un efecto SVG similar\r\n+            if (position === 'top-left') {\r\n+                bloodCorner.innerHTML = `\r\n+                    <svg width=\"150\" height=\"150\" viewBox=\"0 0 100 100\">\r\n+                        <path d=\"M0,0 Q30,5 50,15 T80,40 Q70,50 50,45 T20,40 Q10,30 0,0 Z\" \r\n+                            fill=\"#570707\" fill-opacity=\"0.7\"/>\r\n+                        <path d=\"M0,0 Q10,30 30,20 T40,30 Q35,45 20,25 T0,30 L0,0 Z\" \r\n+                            fill=\"#800e0e\" fill-opacity=\"0.8\"/>\r\n+                    </svg>\r\n+                `;\r\n+            }\r\n+            \r\n+            document.body.appendChild(bloodCorner);\r\n+        });\r\n+    }\r\n+    \r\n+    /**\r\n+     * Crea efecto de velas/antorchas en los lados\r\n+     */\r\n+    createCandlesEffect() {\r\n+        const candlePositions = [\r\n+            { left: '10%', top: '30%' },\r\n+            { left: '90%', top: '30%' },\r\n+            { left: '5%', top: '60%' },\r\n+            { left: '95%', top: '60%' }\r\n+        ];\r\n+        \r\n+        candlePositions.forEach(pos => {\r\n+            const candle = document.createElement('div');\r\n+            candle.className = 'gothic-candle';\r\n+            candle.style.cssText = `\r\n+                position: fixed;\r\n+                width: 16px;\r\n+                height: 32px;\r\n+                left: ${pos.left};\r\n+                top: ${pos.top};\r\n+                z-index: 4;\r\n+                pointer-events: none;\r\n+            `;\r\n+            \r\n+            // Añadir base de la vela\r\n+            const candleBase = document.createElement('div');\r\n+            candleBase.style.cssText = `\r\n+                position: absolute;\r\n+                bottom: 0;\r\n+                left: 0;\r\n+                width: 16px;\r\n+                height: 16px;\r\n+                background-color: #5d1c00;\r\n+            `;\r\n+            \r\n+            // Añadir llama\r\n+            const flame = document.createElement('div');\r\n+            flame.style.cssText = `\r\n+                position: absolute;\r\n+                bottom: 14px;\r\n+                left: 4px;\r\n+                width: 8px;\r\n+                height: 16px;\r\n+                background: linear-gradient(to top, #ff6600, #ffcc00);\r\n+                border-radius: 8px 8px 0 0;\r\n+                animation: flame-flicker 1s infinite alternate ease-in-out;\r\n+            `;\r\n+            \r\n+            // Añadir brillo\r\n+            const glow = document.createElement('div');\r\n+            glow.style.cssText = `\r\n+                position: absolute;\r\n+                left: -32px;\r\n+                top: -32px;\r\n+                width: 80px;\r\n+                height: 80px;\r\n+                border-radius: 50%;\r\n+                background: radial-gradient(circle, \r\n+                    rgba(255, 204, 0, 0.3) 0%, \r\n+                    rgba(255, 102, 0, 0.1) 40%, \r\n+                    rgba(0, 0, 0, 0) 70%\r\n+                );\r\n+                animation: glow-pulse 2s infinite alternate;\r\n+            `;\r\n+            \r\n+            candle.appendChild(candleBase);\r\n+            candle.appendChild(flame);\r\n+            candle.appendChild(glow);\r\n+            \r\n+            document.body.appendChild(candle);\r\n+        });\r\n+        \r\n+        // Añadir estilos para animaciones\r\n+        const style = document.createElement('style');\r\n+        style.textContent = `\r\n+            @keyframes flame-flicker {\r\n+                0%, 100% { transform: scale(1); }\r\n+                50% { transform: scale(1.1, 1.2); }\r\n+            }\r\n+            \r\n+            @keyframes glow-pulse {\r\n+                0%, 100% { opacity: 0.7; }\r\n+                50% { opacity: 0.3; }\r\n+            }\r\n+        `;\r\n+        document.head.appendChild(style);\r\n+    }\r\n+    \r\n+    /**\r\n      * Añade un overlay con detalles góticos\r\n      */\r\n     addGothicDetailOverlay() {\r\n         // Crear arcos góticos en la parte superior\r\n@@ -215,16 +465,59 @@\n             <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 800 100\" preserveAspectRatio=\"xMidYMax slice\">\r\n                 <defs>\r\n                     <pattern id=\"archPattern\" patternUnits=\"userSpaceOnUse\" width=\"200\" height=\"100\">\r\n                         <path d=\"M0,100 L0,40 Q40,0 100,40 Q160,0 200,40 L200,100 Z\" \r\n-                              fill=\"none\" stroke=\"#430e0e\" stroke-width=\"2\"/>\r\n+                              fill=\"none\" stroke=\"#800e0e\" stroke-width=\"2\"/>\r\n                         <path d=\"M50,100 L50,60 Q75,40 100,60 Q125,40 150,60 L150,100\" \r\n-                              fill=\"none\" stroke=\"#35102a\" stroke-width=\"3\"/>\r\n+                              fill=\"none\" stroke=\"#570707\" stroke-width=\"3\"/>\r\n                     </pattern>\r\n                 </defs>\r\n                 <rect width=\"100%\" height=\"100\" fill=\"url(#archPattern)\"/>\r\n             </svg>\r\n         `;\r\n         \r\n         document.body.appendChild(arches);\r\n     }\r\n+    \r\n+    /**\r\n+     * Configura el efecto de sangre goteando desde la parte superior\r\n+     */\r\n+    setupBloodDripping() {\r\n+        // Crear 5-8 gotas de sangre aleatorias\r\n+        const dropCount = 5 + Math.floor(Math.random() * 4);\r\n+        \r\n+        for (let i = 0; i < dropCount; i++) {\r\n+            // Posicionar aleatoriamente en la parte superior\r\n+            const xPos = Math.random() * 100; // posición horizontal aleatoria\r\n+            \r\n+            this.createBloodDrop(xPos);\r\n+        }\r\n+    }\r\n+    \r\n+    /**\r\n+     * Crea una gota de sangre en la posición indicada\r\n+     */\r\n+    createBloodDrop(xPos) {\r\n+        const drop = document.createElement('div');\r\n+        drop.className = 'blood-drop';\r\n+        \r\n+        // Características aleatorias para la gota\r\n+        const width = 4 + Math.floor(Math.random() * 4); // 4-8px\r\n+        const delay = Math.random() * 10; // 0-10s de retraso\r\n+        const duration = 6 + Math.random() * 10; // 6-16s para caer\r\n+        \r\n+        drop.style.cssText = `\r\n+            position: fixed;\r\n+            top: -20px;\r\n+            left: ${xPos}%;\r\n+            width: ${width}px;\r\n+            height: 20px;\r\n+            background-color: #800e0e;\r\n+            border-radius: 0 0 50% 50%;\r\n+            opacity: 0.7;\r\n+            z-index: 3;\r\n+            animation: blood-dripping ${duration}s infinite ${delay}s linear;\r\n+        `;\r\n+        \r\n+        document.body.appendChild(drop);\r\n+    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741036406192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n         this.initialized = false;\r\n         \r\n         this.initialize();\r\n         \r\n-        this.addGothicDetailOverlay();\r\n+        // Se eliminó la llamada a addGothicDetailOverlay()\r\n     }\r\n     \r\n     /**\r\n      * Inicializa los efectos góticos\r\n@@ -438,48 +438,8 @@\n         document.head.appendChild(style);\r\n     }\r\n     \r\n     /**\r\n-     * Añade un overlay con detalles góticos\r\n-     */\r\n-    addGothicDetailOverlay() {\r\n-        // Crear arcos góticos en la parte superior\r\n-        const arches = document.createElement('div');\r\n-        arches.className = 'gothic-arches';\r\n-        arches.style.cssText = `\r\n-            position: fixed;\r\n-            top: 0;\r\n-            left: 0;\r\n-            right: 0;\r\n-            height: 80px;\r\n-            background-image: url('../assets/images/decorations/gothic_arches.png');\r\n-            background-size: auto 100%;\r\n-            background-repeat: repeat-x;\r\n-            background-position: center top;\r\n-            pointer-events: none;\r\n-            z-index: 4;\r\n-            opacity: 0.7;\r\n-        `;\r\n-        \r\n-        // Si no hay imagen, creamos un SVG inline\r\n-        arches.innerHTML = `\r\n-            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 800 100\" preserveAspectRatio=\"xMidYMax slice\">\r\n-                <defs>\r\n-                    <pattern id=\"archPattern\" patternUnits=\"userSpaceOnUse\" width=\"200\" height=\"100\">\r\n-                        <path d=\"M0,100 L0,40 Q40,0 100,40 Q160,0 200,40 L200,100 Z\" \r\n-                              fill=\"none\" stroke=\"#800e0e\" stroke-width=\"2\"/>\r\n-                        <path d=\"M50,100 L50,60 Q75,40 100,60 Q125,40 150,60 L150,100\" \r\n-                              fill=\"none\" stroke=\"#570707\" stroke-width=\"3\"/>\r\n-                    </pattern>\r\n-                </defs>\r\n-                <rect width=\"100%\" height=\"100\" fill=\"url(#archPattern)\"/>\r\n-            </svg>\r\n-        `;\r\n-        \r\n-        document.body.appendChild(arches);\r\n-    }\r\n-    \r\n-    /**\r\n      * Configura el efecto de sangre goteando desde la parte superior\r\n      */\r\n     setupBloodDripping() {\r\n         // Crear 5-8 gotas de sangre aleatorias\r\n"
                }
            ],
            "date": 1741027450442,
            "name": "Commit-0",
            "content": "/**\r\n * Efectos visuales especialmente diseñados para reforzar la estética gótico-cyberpunk\r\n * de Cybervania, dándole un carácter único y reconocible\r\n */\r\nexport class GothicEffects {\r\n    constructor(containerId) {\r\n        this.container = document.getElementById(containerId);\r\n        this.elements = {};\r\n        this.initialize();\r\n    }\r\n    \r\n    initialize() {\r\n        this.addGargoyles();\r\n        this.createPentagram();\r\n        this.addBloodSplatter();\r\n        this.setupRitualGlowEffect();\r\n        this.startAmbientLightning();\r\n        \r\n        // Agregar clase especial al título\r\n        const title = document.querySelector('.title-container h1');\r\n        if (title) {\r\n            title.classList.add('gothic-title');\r\n            title.setAttribute('data-text', title.textContent);\r\n        }\r\n    }\r\n    \r\n    addGargoyles() {\r\n        // Añadir gárgolas como vigilantes en las esquinas\r\n        const gargoylePositions = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\r\n        \r\n        gargoylePositions.forEach((position, index) => {\r\n            const gargoyle = document.createElement('div');\r\n            gargoyle.className = `gargoyle-ornament ${position}`;\r\n            gargoyle.innerHTML = this.getGargoyleSVG(index);\r\n            this.container.appendChild(gargoyle);\r\n            \r\n            // Efectos interactivos en las gárgolas\r\n            gargoyle.addEventListener('mouseenter', () => {\r\n                gargoyle.classList.add('awakened');\r\n                \r\n                // Efecto de ojos brillantes\r\n                const eyes = gargoyle.querySelectorAll('.gargoyle-eye');\r\n                eyes.forEach(eye => {\r\n                    eye.style.fill = '#ff2288';\r\n                    eye.style.filter = 'drop-shadow(0 0 3px #ff2288)';\r\n                });\r\n                \r\n                // Sonido sutil (implementado como console.log por ahora)\r\n                console.log('Gargoyle awakened: subtle stone grinding sound');\r\n            });\r\n            \r\n            gargoyle.addEventListener('mouseleave', () => {\r\n                gargoyle.classList.remove('awakened');\r\n                \r\n                // Devolver ojos a estado normal\r\n                const eyes = gargoyle.querySelectorAll('.gargoyle-eye');\r\n                eyes.forEach(eye => {\r\n                    eye.style.fill = '#8a0303';\r\n                    eye.style.filter = '';\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    getGargoyleSVG(variant) {\r\n        // Diseños simples de gárgolas con estilo gótico-tech\r\n        const svgTemplates = [\r\n            // Gárgola básica mirando hacia adelante\r\n            `<svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\">\r\n                <path class=\"gargoyle-body\" d=\"M25,10 Q35,5 40,15 T25,35 Q15,45 10,30 T25,10\" fill=\"#2d0245\" stroke=\"#bf9b30\" stroke-width=\"0.5\"/>\r\n                <circle class=\"gargoyle-eye\" cx=\"20\" cy=\"18\" r=\"2\" fill=\"#8a0303\"/>\r\n                <circle class=\"gargoyle-eye\" cx=\"30\" cy=\"18\" r=\"2\" fill=\"#8a0303\"/>\r\n                <path class=\"gargoyle-circuit\" d=\"M15,25 h20 M25,15 v15\" stroke=\"#ff2288\" stroke-width=\"0.5\" opacity=\"0.6\"/>\r\n            </svg>`,\r\n            \r\n            // Gárgola con alas digitales\r\n            `<svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\">\r\n                <path class=\"gargoyle-wing\" d=\"M10,15 Q15,5 25,10 L25,25 Z\" fill=\"#2d0245\" stroke=\"#bf9b30\" stroke-width=\"0.5\"/>\r\n                <path class=\"gargoyle-wing\" d=\"M40,15 Q35,5 25,10 L25,25 Z\" fill=\"#2d0245\" stroke=\"#bf9b30\" stroke-width=\"0.5\"/>\r\n                <path class=\"gargoyle-body\" d=\"M25,10 Q30,15 30,25 T25,35 Q20,40 20,25 T25,10\" fill=\"#2d0245\" stroke=\"#bf9b30\" stroke-width=\"0.5\"/>\r\n                <circle class=\"gargoyle-eye\" cx=\"23\" cy=\"18\" r=\"2\" fill=\"#8a0303\"/>\r\n                <circle class=\"gargoyle-eye\" cx=\"27\" cy=\"18\" r=\"2\" fill=\"#8a0303\"/>\r\n                <path class=\"gargoyle-circuit\" d=\"M15,15 L35,15 M20,20 L30,20\" stroke=\"#ff2288\" stroke-width=\"0.5\" opacity=\"0.6\"/>\r\n            </svg>`,\r\n            \r\n            // Gárgola guardián con cuernos\r\n            `<svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\">\r\n                <path class=\"gargoyle-horn\" d=\"M20,10 L15,2\" stroke=\"#bf9b30\" stroke-width=\"1\"/>\r\n                <path class=\"gargoyle-horn\" d=\"M30,10 L35,2\" stroke=\"#bf9b30\" stroke-width=\"1\"/>\r\n                <path class=\"gargoyle-body\" d=\"M20,10 Q25,5 30,10 L30,30 Q25,35 20,30 Z\" fill=\"#2d0245\" stroke=\"#bf9b30\" stroke-width=\"0.5\"/>\r\n                <circle class=\"gargoyle-eye\" cx=\"22\" cy=\"15\" r=\"2\" fill=\"#8a0303\"/>\r\n                <circle class=\"gargoyle-eye\" cx=\"28\" cy=\"15\" r=\"2\" fill=\"#8a0303\"/>\r\n                <path class=\"gargoyle-circuit\" d=\"M20,20 L30,20 M20,25 L30,25\" stroke=\"#ff2288\" stroke-width=\"0.5\" opacity=\"0.6\"/>\r\n            </svg>`,\r\n            \r\n            // Gárgola tech con elementos mecánicos\r\n            `<svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\">\r\n                <rect class=\"gargoyle-body\" x=\"15\" y=\"10\" width=\"20\" height=\"25\" rx=\"5\" fill=\"#2d0245\" stroke=\"#bf9b30\" stroke-width=\"0.5\"/>\r\n                <circle class=\"gargoyle-eye\" cx=\"20\" cy=\"18\" r=\"2\" fill=\"#8a0303\"/>\r\n                <circle class=\"gargoyle-eye\" cx=\"30\" cy=\"18\" r=\"2\" fill=\"#8a0303\"/>\r\n                <line x1=\"15\" y1=\"25\" x2=\"35\" y2=\"25\" stroke=\"#bf9b30\" stroke-width=\"0.5\"/>\r\n                <path class=\"gargoyle-circuit\" d=\"M20,25 v5 h10 v-5 M25,30 v5\" stroke=\"#ff2288\" stroke-width=\"0.5\" opacity=\"0.6\"/>\r\n            </svg>`\r\n        ];\r\n        \r\n        return svgTemplates[variant % svgTemplates.length];\r\n    }\r\n    \r\n    createPentagram() {\r\n        // Crear un pentagrama sutil que aparece cuando se carga el menú principal\r\n        const pentagram = document.createElement('div');\r\n        pentagram.className = 'cyber-pentagram';\r\n        pentagram.innerHTML = `\r\n            <svg viewBox=\"0 0 100 100\" width=\"200\" height=\"200\">\r\n                <!-- Pentagrama base con estilo gótico-tech -->\r\n                <path class=\"pentagram-outline\" d=\"M50,10 L61,40 L93,40 L68,60 L79,90 L50,75 L21,90 L32,60 L7,40 L39,40 Z\" \r\n                      fill=\"none\" stroke=\"#bf9b30\" stroke-width=\"0.5\" opacity=\"0.3\"/>\r\n                \r\n                <!-- Círculo exterior -->\r\n                <circle class=\"pentagram-circle\" cx=\"50\" cy=\"50\" r=\"45\" \r\n                        fill=\"none\" stroke=\"#bf9b30\" stroke-width=\"0.3\" opacity=\"0.2\"/>\r\n                \r\n                <!-- Símbolos arcanos digitalizados -->\r\n                <text x=\"48\" y=\"30\" font-family=\"serif\" fill=\"#bf9b30\" opacity=\"0.4\" font-size=\"5\">01010</text>\r\n                <text x=\"73\" y=\"45\" font-family=\"serif\" fill=\"#bf9b30\" opacity=\"0.4\" font-size=\"5\">10110</text>\r\n                <text x=\"65\" y=\"75\" font-family=\"serif\" fill=\"#bf9b30\" opacity=\"0.4\" font-size=\"5\">00101</text>\r\n                <text x=\"35\" y=\"75\" font-family=\"serif\" fill=\"#bf9b30\" opacity=\"0.4\" font-size=\"5\">11001</text>\r\n                <text x=\"26\" y=\"45\" font-family=\"serif\" fill=\"#bf9b30\" opacity=\"0.4\" font-size=\"5\">01100</text>\r\n                \r\n                <!-- Circuito interno -->\r\n                <path class=\"pentagram-circuit\" d=\"M50,10 L50,90 M10,50 L90,50 M25,25 L75,75 M25,75 L75,25\" \r\n                      stroke=\"#ff2288\" stroke-width=\"0.2\" opacity=\"0.15\"/>\r\n            </svg>\r\n        `;\r\n        \r\n        this.container.appendChild(pentagram);\r\n        this.elements.pentagram = pentagram;\r\n        \r\n        // Animar entrada del pentagrama\r\n        setTimeout(() => {\r\n            pentagram.classList.add('reveal');\r\n        }, 1000);\r\n    }\r\n    \r\n    addBloodSplatter() {\r\n        // Añadir pequeñas manchas de sangre digital en los márgenes\r\n        const splatterCount = 5;\r\n        \r\n        for (let i = 0; i < splatterCount; i++) {\r\n            const splatter = document.createElement('div');\r\n            splatter.className = 'blood-splatter';\r\n            \r\n            // Posicionar aleatoriamente en los márgenes\r\n            const side = Math.floor(Math.random() * 4); // 0: top, 1: right, 2: bottom, 3: left\r\n            const position = Math.random() * 80 + 10; // 10% a 90%\r\n            \r\n            switch (side) {\r\n                case 0:\r\n                    splatter.style.top = '10px';\r\n                    splatter.style.left = `${position}%`;\r\n                    break;\r\n                case 1:\r\n                    splatter.style.right = '10px';\r\n                    splatter.style.top = `${position}%`;\r\n                    break;\r\n                case 2:\r\n                    splatter.style.bottom = '10px';\r\n                    splatter.style.left = `${position}%`;\r\n                    break;\r\n                case 3:\r\n                    splatter.style.left = '10px';\r\n                    splatter.style.top = `${position}%`;\r\n                    break;\r\n            }\r\n            \r\n            // Tamaño y rotación aleatorios\r\n            const size = Math.random() * 50 + 20; // 20px a 70px\r\n            const rotation = Math.random() * 360;\r\n            splatter.style.width = `${size}px`;\r\n            splatter.style.height = `${size}px`;\r\n            splatter.style.transform = `rotate(${rotation}deg)`;\r\n            \r\n            // SVG de mancha de sangre digitalizada\r\n            splatter.innerHTML = `\r\n                <svg viewBox=\"0 0 100 100\" width=\"100%\" height=\"100%\">\r\n                    <path d=\"M50,20 Q70,10 80,30 T60,60 Q40,80 20,50 T50,20\" \r\n                          fill=\"#8a0303\" opacity=\"0.15\" filter=\"url(#blood-filter-${i})\"/>\r\n                    \r\n                    <!-- Filtros para efecto digital -->\r\n                    <defs>\r\n                        <filter id=\"blood-filter-${i}\">\r\n                            <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.01\" numOctaves=\"1\" />\r\n                            <feDisplacementMap in=\"SourceGraphic\" scale=\"5\" />\r\n                        </filter>\r\n                    </defs>\r\n                </svg>\r\n            `;\r\n            \r\n            this.container.appendChild(splatter);\r\n        }\r\n    }\r\n    \r\n    setupRitualGlowEffect() {\r\n        // Efecto de brillo ritual alrededor de los elementos del menú\r\n        const menuScreen = document.querySelector('.menu-screen');\r\n        if (menuScreen) {\r\n            const ritualGlow = document.createElement('div');\r\n            ritualGlow.className = 'ritual-glow';\r\n            \r\n            menuScreen.insertBefore(ritualGlow, menuScreen.firstChild);\r\n            \r\n            // Agregar símbolos arcanos en el fondo\r\n            const arcaneSymbols = document.createElement('div');\r\n            arcaneSymbols.className = 'arcane-symbols';\r\n            arcaneSymbols.innerHTML = this.generateArcaneSymbols();\r\n            \r\n            menuScreen.insertBefore(arcaneSymbols, menuScreen.firstChild);\r\n        }\r\n    }\r\n    \r\n    generateArcaneSymbols() {\r\n        // Generar símbolos arcanos/alquímicos con estilo digital\r\n        let symbols = '';\r\n        const symbolCount = 8;\r\n        const arcaneShapes = [\r\n            'M10,0 L20,20 L0,20 Z', // Triángulo\r\n            'M0,0 L20,0 L20,20 L0,20 Z', // Cuadrado\r\n            'M10,0 L20,10 L10,20 L0,10 Z', // Rombo\r\n            'M10,0 A10,10 0 1,0 10,20 A10,10 0 1,0 10,0 Z' // Círculo\r\n        ];\r\n        \r\n        const arcaneLines = [\r\n            'M5,10 L15,10', // Horizontal\r\n            'M10,5 L10,15', // Vertical\r\n            'M5,5 L15,15', // Diagonal\r\n            'M5,15 L15,5', // Diagonal inversa\r\n            'M10,5 Q15,10 10,15', // Curva\r\n            'M5,10 Q10,5 15,10', // Curva\r\n        ];\r\n        \r\n        for (let i = 0; i < symbolCount; i++) {\r\n            // Posición aleatoria\r\n            const x = Math.floor(Math.random() * 80) + 5; // 5% a 85%\r\n            const y = Math.floor(Math.random() * 80) + 5; // 5% a 85%\r\n            \r\n            // Tamaño y opacidad aleatorios\r\n            const size = Math.floor(Math.random() * 20) + 10; // 10px a 30px\r\n            const opacity = (Math.random() * 0.2 + 0.1).toFixed(2); // 0.1 a 0.3\r\n            \r\n            // Seleccionar forma y líneas aleatorias\r\n            const shape = arcaneShapes[Math.floor(Math.random() * arcaneShapes.length)];\r\n            const line1 = arcaneLines[Math.floor(Math.random() * arcaneLines.length)];\r\n            const line2 = arcaneLines[Math.floor(Math.random() * arcaneLines.length)];\r\n            \r\n            // Crear SVG\r\n            symbols += `"
        }
    ]
}