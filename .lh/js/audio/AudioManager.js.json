{
    "sourceFile": "js/audio/AudioManager.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741029598398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741029598398,
            "name": "Commit-0",
            "content": "/**\r\n * Sistema de audio para Cybervania\r\n */\r\nexport class AudioManager {\r\n    constructor() {\r\n        this.context = null;\r\n        this.masterGain = null;\r\n        this.musicGain = null;\r\n        this.sfxGain = null;\r\n        \r\n        // Volúmenes entre 0 y 1\r\n        this.volumes = {\r\n            master: 1.0,\r\n            music: 0.7,\r\n            sfx: 0.8\r\n        };\r\n        \r\n        // Tracks de audio cargados\r\n        this.tracks = {};\r\n        \r\n        // Reproductor de música actual\r\n        this.currentMusic = null;\r\n        \r\n        // Inicializar si es compatible\r\n        this.initialize();\r\n    }\r\n    \r\n    /**\r\n     * Inicializa el sistema de audio\r\n     */\r\n    initialize() {\r\n        try {\r\n            // Crear contexto de audio\r\n            const AudioContext = window.AudioContext || window.webkitAudioContext;\r\n            if (!AudioContext) {\r\n                console.warn('AudioContext no soportado en este navegador');\r\n                return false;\r\n            }\r\n            \r\n            this.context = new AudioContext();\r\n            \r\n            // Configurar nodos de ganancia\r\n            this.masterGain = this.context.createGain();\r\n            this.masterGain.connect(this.context.destination);\r\n            \r\n            this.musicGain = this.context.createGain();\r\n            this.musicGain.connect(this.masterGain);\r\n            \r\n            this.sfxGain = this.context.createGain();\r\n            this.sfxGain.connect(this.masterGain);\r\n            \r\n            // Aplicar volúmenes iniciales\r\n            this.setMasterVolume(this.volumes.master);\r\n            this.setMusicVolume(this.volumes.music);\r\n            this.setSFXVolume(this.volumes.sfx);\r\n            \r\n            console.log('Sistema de audio inicializado correctamente');\r\n            return true;\r\n            \r\n        } catch (e) {\r\n            console.error('Error inicializando el sistema de audio:', e);\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Verifica si el sistema de audio está activo\r\n     */\r\n    isReady() {\r\n        return !!this.context;\r\n    }\r\n    \r\n    /**\r\n     * Resume el contexto de audio (necesario en navegadores modernos)\r\n     */\r\n    resume() {\r\n        if (this.context && this.context.state === 'suspended') {\r\n            this.context.resume().then(() => {\r\n                console.log('Contexto de audio activado');\r\n            });\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Carga un archivo de audio y lo almacena en memoria\r\n     */\r\n    loadTrack(id, url, type = 'sfx') {\r\n        // Evitar cargar duplicados\r\n        if (this.tracks[id]) return;\r\n        \r\n        // Carga mediante promesas\r\n        return fetch(url)\r\n            .then(response => response.arrayBuffer())\r\n            .then(arrayBuffer => this.context.decodeAudioData(arrayBuffer))\r\n            .then(audioBuffer => {\r\n                this.tracks[id] = {\r\n                    buffer: audioBuffer,\r\n                    type: type\r\n                };\r\n                console.log(`Audio '${id}' cargado correctamente`);\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error cargando audio '${id}':`, error);\r\n            });\r\n    }\r\n    \r\n    /**\r\n     * Reproductor de efectos de sonido\r\n     */\r\n    playSound(id) {\r\n        if (!this.isReady() || !this.tracks[id]) {\r\n            console.warn(`No se puede reproducir sonido '${id}'`);\r\n            return null;\r\n        }\r\n        \r\n        try {\r\n            // Crear nodo de fuente\r\n            const source = this.context.createBufferSource();\r\n            source.buffer = this.tracks[id].buffer;\r\n            \r\n            // Conectar al nodo de ganancia correcto\r\n            const gainNode = this.tracks[id].type === 'music' ? this.musicGain : this.sfxGain;\r\n            source.connect(gainNode);\r\n            \r\n            // Reproducir\r\n            source.start(0);\r\n            return source;\r\n            \r\n        } catch (e) {\r\n            console.error(`Error reproduciendo '${id}':`, e);\r\n            return null;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Reproduce música con opciones de loop\r\n     */\r\n    playMusic(id, options = { loop: true, fadeIn: 1 }) {\r\n        if (!this.isReady() || !this.tracks[id]) {\r\n            console.warn(`No se puede reproducir música '${id}'`);\r\n            return;\r\n        }\r\n        \r\n        // Si ya estamos reproduciendo esta música, salir\r\n        if (this.currentMusic && this.currentMusic.id === id) return;\r\n        \r\n        // Detener música anterior si existe\r\n        this.stopMusic();\r\n        \r\n        try {\r\n            // Crear fuente de buffer\r\n            const source = this.context.createBufferSource();\r\n            source.buffer = this.tracks[id].buffer;\r\n            source.loop = options.loop;\r\n            \r\n            // Fade-in opcional\r\n            if (options.fadeIn > 0) {\r\n                const currentTime = this.context.currentTime;\r\n                this.musicGain.gain.setValueAtTime(0, currentTime);\r\n                this.musicGain.gain.linearRampToValueAtTime(\r\n                    this.volumes.music, \r\n                    currentTime + options.fadeIn\r\n                );\r\n            }\r\n            \r\n            // Conectar y reproducir\r\n            source.connect(this.musicGain);\r\n            source.start(0);\r\n            \r\n            // Guardar referencia\r\n            this.currentMusic = {\r\n                id: id,\r\n                source: source,\r\n                startTime: this.context.currentTime\r\n            };\r\n            \r\n            console.log(`Música '${id}' iniciada`);\r\n            \r\n        } catch (e) {\r\n            console.error(`Error reproduciendo música '${id}':`, e);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Detiene la música actual con fade opcional\r\n     */\r\n    stopMusic(fadeOut = 1) {\r\n        if (!this.currentMusic) return;\r\n        \r\n        try {\r\n            const source = this.currentMusic.source;\r\n            \r\n            // Fade-out opcional\r\n            if (fadeOut > 0) {\r\n                const currentTime = this.context.currentTime;\r\n                this.musicGain.gain.setValueAtTime(this.volumes.music, currentTime);\r\n                this.musicGain.gain.linearRampToValueAtTime(0, currentTime + fadeOut);\r\n                \r\n                // Detener después del fade\r\n                setTimeout(() => {\r\n                    source.stop(0);\r\n                }, fadeOut * 1000);\r\n                \r\n            } else {\r\n                // Detener inmediatamente\r\n                source.stop(0);\r\n            }\r\n            \r\n            this.currentMusic = null;\r\n            \r\n        } catch (e) {\r\n            console.error('Error al detener música:', e);\r\n            this.currentMusic = null;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Pausa la música actual\r\n     */\r\n    pauseMusic() {\r\n        if (!this.currentMusic) return;\r\n        \r\n        try {\r\n            this.currentMusic.source.stop(0);\r\n            this.currentMusic.pauseTime = this.context.currentTime - this.currentMusic.startTime;\r\n            console.log(`Música pausada en ${this.currentMusic.pauseTime}`);\r\n        } catch (e) {\r\n            console.error('Error al pausar música:', e);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Ajusta el volumen maestro\r\n     */\r\n    setMasterVolume(volume) {\r\n        if (!this.isReady()) return;\r\n        \r\n        volume = Math.max(0, Math.min(1, volume));\r\n        this.volumes.master = volume;\r\n        this.masterGain.gain.value = volume;\r\n    }\r\n    \r\n    /**\r\n     * Ajusta el volumen de música\r\n     */\r\n    setMusicVolume(volume) {\r\n        if (!this.isReady()) return;\r\n        \r\n        volume = Math.max(0, Math.min(1, volume));\r\n        this.volumes.music = volume;\r\n        this.musicGain.gain.value = volume;\r\n    }\r\n    \r\n    /**\r\n     * Ajusta el volumen de efectos\r\n     */\r\n    setSFXVolume(volume) {\r\n        if (!this.isReady()) return;\r\n        \r\n        volume = Math.max(0, Math.min(1, volume));\r\n        this.volumes.sfx = volume;\r\n        this.sfxGain.gain.value = volume;\r\n    }\r\n    \r\n    /**\r\n     * Precarga efectos de sonido comunes\r\n     */\r\n    preloadCommonSounds() {\r\n        // Cargar sonidos de la interfaz\r\n        this.loadTrack('menu_hover', 'assets/audio/sfx/menu_hover.mp3', 'sfx');\r\n        this.loadTrack('menu_select', 'assets/audio/sfx/menu_select.mp3', 'sfx');\r\n        this.loadTrack('menu_back', 'assets/audio/sfx/menu_back.mp3', 'sfx');\r\n        \r\n        // Cargar música\r\n        this.loadTrack('menu_theme', 'assets/audio/music/menu_theme.mp3', 'music');\r\n    }\r\n}\r\n\r\n// Instancia global para acceso desde cualquier parte\r\nlet audioManagerInstance = null;\r\n\r\nexport function getAudioManager() {\r\n    if (!audioManagerInstance) {\r\n        audioManagerInstance = new AudioManager();\r\n    }\r\n    return audioManagerInstance;\r\n}\r\n"
        }
    ]
}